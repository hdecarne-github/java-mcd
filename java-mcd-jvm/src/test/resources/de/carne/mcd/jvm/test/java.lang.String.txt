/*
 * Class file version: 55.0
 *
 * Source file: String.java
 */
package java.lang;

public final /* super */ class String implements java.io.Serializable, Comparable<String>, CharSequence {
    
    @jdk.internal.vm.annotation.Stable private final byte[] value;
    
    private final byte coder;
    
    private int hash;
    
    private static final long serialVersionUID = -6849794470754667710l;
    
    static final boolean COMPACT_STRINGS;
    
    private static final java.io.ObjectStreamField[] serialPersistentFields;
    
    public static final java.util.Comparator<String> CASE_INSENSITIVE_ORDER;
    
    static final byte LATIN1 = 0;
    
    static final byte UTF16 = 1;
    
    public void <init>() {
        // max_stack: 2
        // max_locals: 1
        0000: aload_0
        0001: invokespecial #1 // void Object.<init>()
        0004: aload_0
        0005: ldc #2 // ""
        0007: getfield #3 // byte[] String.value
        000a: putfield #3 // byte[] String.value
        000d: aload_0
        000e: ldc #2 // ""
        0010: getfield #4 // byte String.coder
        0013: putfield #4 // byte String.coder
        0016: return
    }
    
    @jdk.internal.HotSpotIntrinsicCandidate
    public void <init>(String) {
        // max_stack: 2
        // max_locals: 2
        0000: aload_0
        0001: invokespecial #1 // void Object.<init>()
        0004: aload_0
        0005: aload_1
        0006: getfield #3 // byte[] String.value
        0009: putfield #3 // byte[] String.value
        000c: aload_0
        000d: aload_1
        000e: getfield #4 // byte String.coder
        0011: putfield #4 // byte String.coder
        0014: aload_0
        0015: aload_1
        0016: getfield #5 // int String.hash
        0019: putfield #5 // int String.hash
        001c: return
    }
    
    public void <init>(char[]) {
        // max_stack: 5
        // max_locals: 2
        0000: aload_0
        0001: aload_1
        0002: iconst_0
        0003: aload_1
        0004: arraylength
        0005: aconst_null
        0006: invokespecial #6 // void String.<init>(char[], int, int, Void)
        0009: return
    }
    
    public void <init>(char[], int, int) {
        // max_stack: 7
        // max_locals: 4
        0000: aload_0
        0001: aload_1
        0002: iload_2
        0003: iload_3
        0004: aload_1
        0005: iload_2
        0006: iload_3
        0007: invokestatic #7 // Void String.rangeCheck(char[], int, int)
        000a: invokespecial #6 // void String.<init>(char[], int, int, Void)
        000d: return
    }
    
    private static Void rangeCheck(char[], int, int) {
        // max_stack: 3
        // max_locals: 3
        0000: iload_1
        0001: iload_2
        0002: aload_0
        0003: arraylength
        0004: invokestatic #8 // void String.checkBoundsOffCount(int, int, int)
        0007: aconst_null
        0008: areturn
    }
    
    public void <init>(int[], int, int) {
        // max_stack: 4
        // max_locals: 5
        0000: aload_0
        0001: invokespecial #1 // void Object.<init>()
        0004: iload_2
        0005: iload_3
        0006: aload_1
        0007: arraylength
        0008: invokestatic #8 // void String.checkBoundsOffCount(int, int, int)
        000b: iload_3
        000c: ifne +22 // 0022
        000f: aload_0
        0010: ldc #2 // ""
        0012: getfield #3 // byte[] String.value
        0015: putfield #3 // byte[] String.value
        0018: aload_0
        0019: ldc #2 // ""
        001b: getfield #4 // byte String.coder
        001e: putfield #4 // byte String.coder
        0021: return
        0022: getstatic #9 // boolean String.COMPACT_STRINGS
        0025: ifeq +28 // 0041
        0028: aload_1
        0029: iload_2
        002a: iload_3
        002b: invokestatic #10 // byte[] StringLatin1.toBytes(int[], int, int)
        002e: astore local_4
        0030: aload local_4
        0032: ifnull +15 // 0041
        0035: aload_0
        0036: iconst_0
        0037: putfield #4 // byte String.coder
        003a: aload_0
        003b: aload local_4
        003d: putfield #3 // byte[] String.value
        0040: return
        0041: aload_0
        0042: iconst_1
        0043: putfield #4 // byte String.coder
        0046: aload_0
        0047: aload_1
        0048: iload_2
        0049: iload_3
        004a: invokestatic #12 // byte[] StringUTF16.toBytes(int[], int, int)
        004d: putfield #3 // byte[] String.value
        0050: return
    }
    
    @Deprecated(since = "1.1")
    public void <init>(byte[], int, int, int) {
        // max_stack: 5
        // max_locals: 7
        0000: aload_0
        0001: invokespecial #1 // void Object.<init>()
        0004: iload_3
        0005: iload local_4
        0007: aload_1
        0008: arraylength
        0009: invokestatic #8 // void String.checkBoundsOffCount(int, int, int)
        000c: iload local_4
        000e: ifne +22 // 0024
        0011: aload_0
        0012: ldc #2 // ""
        0014: getfield #3 // byte[] String.value
        0017: putfield #3 // byte[] String.value
        001a: aload_0
        001b: ldc #2 // ""
        001d: getfield #4 // byte String.coder
        0020: putfield #4 // byte String.coder
        0023: return
        0024: getstatic #9 // boolean String.COMPACT_STRINGS
        0027: ifeq +29 // 0044
        002a: iload_2
        002b: i2b
        002c: ifne +24 // 0044
        002f: aload_0
        0030: aload_1
        0031: iload_3
        0032: iload_3
        0033: iload local_4
        0035: iadd
        0036: invokestatic #13 // byte[] java.util.Arrays.copyOfRange(byte[], int, int)
        0039: putfield #3 // byte[] String.value
        003c: aload_0
        003d: iconst_0
        003e: putfield #4 // byte String.coder
        0041: goto +61 // 007e
        0044: iload_2
        0045: bipush 8
        0047: ishl
        0048: istore_2
        0049: iload local_4
        004b: invokestatic #14 // byte[] StringUTF16.newBytesFor(int)
        004e: astore local_5
        0050: iconst_0
        0051: istore local_6
        0053: iload local_6
        0055: iload local_4
        0057: if_icmpge +28 // 0073
        005a: aload local_5
        005c: iload local_6
        005e: iload_2
        005f: aload_1
        0060: iload_3
        0061: iinc local_3, 1
        0064: baload
        0065: sipush 255
        0068: iand
        0069: ior
        006a: invokestatic #15 // void StringUTF16.putChar(byte[], int, int)
        006d: iinc local_6, 1
        0070: goto -29 // 0053
        0073: aload_0
        0074: aload local_5
        0076: putfield #3 // byte[] String.value
        0079: aload_0
        007a: iconst_1
        007b: putfield #4 // byte String.coder
        007e: return
    }
    
    @Deprecated(since = "1.1")
    public void <init>(byte[], int) {
        // max_stack: 5
        // max_locals: 3
        0000: aload_0
        0001: aload_1
        0002: iload_2
        0003: iconst_0
        0004: aload_1
        0005: arraylength
        0006: invokespecial #16 // void String.<init>(byte[], int, int, int)
        0009: return
    }
    
    public void <init>(byte[], int, int, String) throws java.io.UnsupportedEncodingException {
        // max_stack: 4
        // max_locals: 6
        0000: aload_0
        0001: invokespecial #1 // void Object.<init>()
        0004: aload local_4
        0006: ifnonnull +13 // 0013
        0009: new #17 // NullPointerException
        000c: dup
        000d: ldc #18 // "charsetName"
        000f: invokespecial #19 // void NullPointerException.<init>(String)
        0012: athrow
        0013: iload_2
        0014: iload_3
        0015: aload_1
        0016: arraylength
        0017: invokestatic #8 // void String.checkBoundsOffCount(int, int, int)
        001a: aload local_4
        001c: aload_1
        001d: iload_2
        001e: iload_3
        001f: invokestatic #20 // StringCoding$Result StringCoding.decode(String, byte[], int, int)
        0022: astore local_5
        0024: aload_0
        0025: aload local_5
        0027: getfield #21 // byte[] StringCoding$Result.value
        002a: putfield #3 // byte[] String.value
        002d: aload_0
        002e: aload local_5
        0030: getfield #22 // byte StringCoding$Result.coder
        0033: putfield #4 // byte String.coder
        0036: return
    }
    
    public void <init>(byte[], int, int, java.nio.charset.Charset) {
        // max_stack: 4
        // max_locals: 6
        0000: aload_0
        0001: invokespecial #1 // void Object.<init>()
        0004: aload local_4
        0006: ifnonnull +13 // 0013
        0009: new #17 // NullPointerException
        000c: dup
        000d: ldc #23 // "charset"
        000f: invokespecial #19 // void NullPointerException.<init>(String)
        0012: athrow
        0013: iload_2
        0014: iload_3
        0015: aload_1
        0016: arraylength
        0017: invokestatic #8 // void String.checkBoundsOffCount(int, int, int)
        001a: aload local_4
        001c: aload_1
        001d: iload_2
        001e: iload_3
        001f: invokestatic #24 // StringCoding$Result StringCoding.decode(java.nio.charset.Charset, byte[], int, int)
        0022: astore local_5
        0024: aload_0
        0025: aload local_5
        0027: getfield #21 // byte[] StringCoding$Result.value
        002a: putfield #3 // byte[] String.value
        002d: aload_0
        002e: aload local_5
        0030: getfield #22 // byte StringCoding$Result.coder
        0033: putfield #4 // byte String.coder
        0036: return
    }
    
    public void <init>(byte[], String) throws java.io.UnsupportedEncodingException {
        // max_stack: 5
        // max_locals: 3
        0000: aload_0
        0001: aload_1
        0002: iconst_0
        0003: aload_1
        0004: arraylength
        0005: aload_2
        0006: invokespecial #25 // void String.<init>(byte[], int, int, String)
        0009: return
    }
    
    public void <init>(byte[], java.nio.charset.Charset) {
        // max_stack: 5
        // max_locals: 3
        0000: aload_0
        0001: aload_1
        0002: iconst_0
        0003: aload_1
        0004: arraylength
        0005: aload_2
        0006: invokespecial #26 // void String.<init>(byte[], int, int, java.nio.charset.Charset)
        0009: return
    }
    
    public void <init>(byte[], int, int) {
        // max_stack: 3
        // max_locals: 5
        0000: aload_0
        0001: invokespecial #1 // void Object.<init>()
        0004: iload_2
        0005: iload_3
        0006: aload_1
        0007: arraylength
        0008: invokestatic #8 // void String.checkBoundsOffCount(int, int, int)
        000b: aload_1
        000c: iload_2
        000d: iload_3
        000e: invokestatic #27 // StringCoding$Result StringCoding.decode(byte[], int, int)
        0011: astore local_4
        0013: aload_0
        0014: aload local_4
        0016: getfield #21 // byte[] StringCoding$Result.value
        0019: putfield #3 // byte[] String.value
        001c: aload_0
        001d: aload local_4
        001f: getfield #22 // byte StringCoding$Result.coder
        0022: putfield #4 // byte String.coder
        0025: return
    }
    
    public void <init>(byte[]) {
        // max_stack: 4
        // max_locals: 2
        0000: aload_0
        0001: aload_1
        0002: iconst_0
        0003: aload_1
        0004: arraylength
        0005: invokespecial #28 // void String.<init>(byte[], int, int)
        0008: return
    }
    
    public void <init>(StringBuffer) {
        // max_stack: 2
        // max_locals: 2
        0000: aload_0
        0001: aload_1
        0002: invokevirtual #29 // String StringBuffer.toString()
        0005: invokespecial #30 // void String.<init>(String)
        0008: return
    }
    
    public void <init>(StringBuilder) {
        // max_stack: 3
        // max_locals: 2
        0000: aload_0
        0001: aload_1
        0002: aconst_null
        0003: invokespecial #31 // void String.<init>(AbstractStringBuilder, Void)
        0006: return
    }
    
    public int length() {
        // max_stack: 2
        // max_locals: 1
        0000: aload_0
        0001: getfield #3 // byte[] String.value
        0004: arraylength
        0005: aload_0
        0006: invokevirtual #32 // byte String.coder()
        0009: ishr
        000a: ireturn
    }
    
    public boolean isEmpty() {
        // max_stack: 1
        // max_locals: 1
        0000: aload_0
        0001: getfield #3 // byte[] String.value
        0004: arraylength
        0005: ifne +7 // 000c
        0008: iconst_1
        0009: goto +4 // 000d
        000c: iconst_0
        000d: ireturn
    }
    
    public char charAt(int) {
        // max_stack: 2
        // max_locals: 2
        0000: aload_0
        0001: invokevirtual #33 // boolean String.isLatin1()
        0004: ifeq +12 // 0010
        0007: aload_0
        0008: getfield #3 // byte[] String.value
        000b: iload_1
        000c: invokestatic #34 // char StringLatin1.charAt(byte[], int)
        000f: ireturn
        0010: aload_0
        0011: getfield #3 // byte[] String.value
        0014: iload_1
        0015: invokestatic #35 // char StringUTF16.charAt(byte[], int)
        0018: ireturn
    }
    
    public int codePointAt(int) {
        // max_stack: 3
        // max_locals: 3
        0000: aload_0
        0001: invokevirtual #33 // boolean String.isLatin1()
        0004: ifeq +23 // 001b
        0007: iload_1
        0008: aload_0
        0009: getfield #3 // byte[] String.value
        000c: arraylength
        000d: invokestatic #36 // void String.checkIndex(int, int)
        0010: aload_0
        0011: getfield #3 // byte[] String.value
        0014: iload_1
        0015: baload
        0016: sipush 255
        0019: iand
        001a: ireturn
        001b: aload_0
        001c: getfield #3 // byte[] String.value
        001f: arraylength
        0020: iconst_1
        0021: ishr
        0022: istore_2
        0023: iload_1
        0024: iload_2
        0025: invokestatic #36 // void String.checkIndex(int, int)
        0028: aload_0
        0029: getfield #3 // byte[] String.value
        002c: iload_1
        002d: iload_2
        002e: invokestatic #37 // int StringUTF16.codePointAt(byte[], int, int)
        0031: ireturn
    }
    
    public int codePointBefore(int) {
        // max_stack: 3
        // max_locals: 3
        0000: iload_1
        0001: iconst_1
        0002: isub
        0003: istore_2
        0004: iload_2
        0005: iflt +11 // 0010
        0008: iload_2
        0009: aload_0
        000a: invokevirtual #38 // int String.length()
        000d: if_icmplt +12 // 0019
        0010: new #39 // StringIndexOutOfBoundsException
        0013: dup
        0014: iload_1
        0015: invokespecial #40 // void StringIndexOutOfBoundsException.<init>(int)
        0018: athrow
        0019: aload_0
        001a: invokevirtual #33 // boolean String.isLatin1()
        001d: ifeq +14 // 002b
        0020: aload_0
        0021: getfield #3 // byte[] String.value
        0024: iload_2
        0025: baload
        0026: sipush 255
        0029: iand
        002a: ireturn
        002b: aload_0
        002c: getfield #3 // byte[] String.value
        002f: iload_1
        0030: invokestatic #41 // int StringUTF16.codePointBefore(byte[], int)
        0033: ireturn
    }
    
    public int codePointCount(int, int) {
        // max_stack: 3
        // max_locals: 3
        0000: iload_1
        0001: iflt +16 // 0011
        0004: iload_1
        0005: iload_2
        0006: if_icmpgt +11 // 0011
        0009: iload_2
        000a: aload_0
        000b: invokevirtual #38 // int String.length()
        000e: if_icmple +11 // 0019
        0011: new #42 // IndexOutOfBoundsException
        0014: dup
        0015: invokespecial #43 // void IndexOutOfBoundsException.<init>()
        0018: athrow
        0019: aload_0
        001a: invokevirtual #33 // boolean String.isLatin1()
        001d: ifeq +7 // 0024
        0020: iload_2
        0021: iload_1
        0022: isub
        0023: ireturn
        0024: aload_0
        0025: getfield #3 // byte[] String.value
        0028: iload_1
        0029: iload_2
        002a: invokestatic #44 // int StringUTF16.codePointCount(byte[], int, int)
        002d: ireturn
    }
    
    public int offsetByCodePoints(int, int) {
        // max_stack: 3
        // max_locals: 3
        0000: iload_1
        0001: iflt +11 // 000c
        0004: iload_1
        0005: aload_0
        0006: invokevirtual #38 // int String.length()
        0009: if_icmple +11 // 0014
        000c: new #42 // IndexOutOfBoundsException
        000f: dup
        0010: invokespecial #43 // void IndexOutOfBoundsException.<init>()
        0013: athrow
        0014: aload_0
        0015: iload_1
        0016: iload_2
        0017: invokestatic #45 // int Character.offsetByCodePoints(CharSequence, int, int)
        001a: ireturn
    }
    
    public void getChars(int, int, char[], int) {
        // max_stack: 5
        // max_locals: 5
        0000: iload_1
        0001: iload_2
        0002: aload_0
        0003: invokevirtual #38 // int String.length()
        0006: invokestatic #46 // void String.checkBoundsBeginEnd(int, int, int)
        0009: iload local_4
        000b: iload_2
        000c: iload_1
        000d: isub
        000e: aload_3
        000f: arraylength
        0010: invokestatic #8 // void String.checkBoundsOffCount(int, int, int)
        0013: aload_0
        0014: invokevirtual #33 // boolean String.isLatin1()
        0017: ifeq +18 // 0029
        001a: aload_0
        001b: getfield #3 // byte[] String.value
        001e: iload_1
        001f: iload_2
        0020: aload_3
        0021: iload local_4
        0023: invokestatic #47 // void StringLatin1.getChars(byte[], int, int, char[], int)
        0026: goto +15 // 0035
        0029: aload_0
        002a: getfield #3 // byte[] String.value
        002d: iload_1
        002e: iload_2
        002f: aload_3
        0030: iload local_4
        0032: invokestatic #48 // void StringUTF16.getChars(byte[], int, int, char[], int)
        0035: return
    }
    
    @Deprecated(since = "1.1")
    public void getBytes(int, int, byte[], int) {
        // max_stack: 5
        // max_locals: 5
        0000: iload_1
        0001: iload_2
        0002: aload_0
        0003: invokevirtual #38 // int String.length()
        0006: invokestatic #46 // void String.checkBoundsBeginEnd(int, int, int)
        0009: aload_3
        000a: invokestatic #49 // Object java.util.Objects.requireNonNull(Object)
        000d: pop
        000e: iload local_4
        0010: iload_2
        0011: iload_1
        0012: isub
        0013: aload_3
        0014: arraylength
        0015: invokestatic #8 // void String.checkBoundsOffCount(int, int, int)
        0018: aload_0
        0019: invokevirtual #33 // boolean String.isLatin1()
        001c: ifeq +18 // 002e
        001f: aload_0
        0020: getfield #3 // byte[] String.value
        0023: iload_1
        0024: iload_2
        0025: aload_3
        0026: iload local_4
        0028: invokestatic #50 // void StringLatin1.getBytes(byte[], int, int, byte[], int)
        002b: goto +15 // 003a
        002e: aload_0
        002f: getfield #3 // byte[] String.value
        0032: iload_1
        0033: iload_2
        0034: aload_3
        0035: iload local_4
        0037: invokestatic #51 // void StringUTF16.getBytes(byte[], int, int, byte[], int)
        003a: return
    }
    
    public byte[] getBytes(String) throws java.io.UnsupportedEncodingException {
        // max_stack: 3
        // max_locals: 2
        0000: aload_1
        0001: ifnonnull +11 // 000c
        0004: new #17 // NullPointerException
        0007: dup
        0008: invokespecial #52 // void NullPointerException.<init>()
        000b: athrow
        000c: aload_1
        000d: aload_0
        000e: invokevirtual #32 // byte String.coder()
        0011: aload_0
        0012: getfield #3 // byte[] String.value
        0015: invokestatic #53 // byte[] StringCoding.encode(String, byte, byte[])
        0018: areturn
    }
    
    public byte[] getBytes(java.nio.charset.Charset) {
        // max_stack: 3
        // max_locals: 2
        0000: aload_1
        0001: ifnonnull +11 // 000c
        0004: new #17 // NullPointerException
        0007: dup
        0008: invokespecial #52 // void NullPointerException.<init>()
        000b: athrow
        000c: aload_1
        000d: aload_0
        000e: invokevirtual #32 // byte String.coder()
        0011: aload_0
        0012: getfield #3 // byte[] String.value
        0015: invokestatic #54 // byte[] StringCoding.encode(java.nio.charset.Charset, byte, byte[])
        0018: areturn
    }
    
    public byte[] getBytes() {
        // max_stack: 2
        // max_locals: 1
        0000: aload_0
        0001: invokevirtual #32 // byte String.coder()
        0004: aload_0
        0005: getfield #3 // byte[] String.value
        0008: invokestatic #55 // byte[] StringCoding.encode(byte, byte[])
        000b: areturn
    }
    
    public boolean equals(Object) {
        // max_stack: 2
        // max_locals: 3
        0000: aload_0
        0001: aload_1
        0002: if_acmpne +5 // 0007
        0005: iconst_1
        0006: ireturn
        0007: aload_1
        0008: instanceof #11 // String
        000b: ifeq +52 // 003f
        000e: aload_1
        000f: checkcast #11 // String
        0012: astore_2
        0013: aload_0
        0014: invokevirtual #32 // byte String.coder()
        0017: aload_2
        0018: invokevirtual #32 // byte String.coder()
        001b: if_icmpne +36 // 003f
        001e: aload_0
        001f: invokevirtual #33 // boolean String.isLatin1()
        0022: ifeq +17 // 0033
        0025: aload_0
        0026: getfield #3 // byte[] String.value
        0029: aload_2
        002a: getfield #3 // byte[] String.value
        002d: invokestatic #56 // boolean StringLatin1.equals(byte[], byte[])
        0030: goto +14 // 003e
        0033: aload_0
        0034: getfield #3 // byte[] String.value
        0037: aload_2
        0038: getfield #3 // byte[] String.value
        003b: invokestatic #57 // boolean StringUTF16.equals(byte[], byte[])
        003e: ireturn
        003f: iconst_0
        0040: ireturn
    }
    
    public boolean contentEquals(StringBuffer) {
        // max_stack: 2
        // max_locals: 2
        0000: aload_0
        0001: aload_1
        0002: invokevirtual #58 // boolean String.contentEquals(CharSequence)
        0005: ireturn
    }
    
    private boolean nonSyncContentEquals(AbstractStringBuilder) {
        // max_stack: 3
        // max_locals: 7
        0000: aload_0
        0001: invokevirtual #38 // int String.length()
        0004: istore_2
        0005: iload_2
        0006: aload_1
        0007: invokevirtual #59 // int AbstractStringBuilder.length()
        000a: if_icmpeq +5 // 000f
        000d: iconst_0
        000e: ireturn
        000f: aload_0
        0010: getfield #3 // byte[] String.value
        0013: astore_3
        0014: aload_1
        0015: invokevirtual #60 // byte[] AbstractStringBuilder.getValue()
        0018: astore local_4
        001a: aload_0
        001b: invokevirtual #32 // byte String.coder()
        001e: aload_1
        001f: invokevirtual #61 // byte AbstractStringBuilder.getCoder()
        0022: if_icmpne +40 // 004a
        0025: aload_3
        0026: arraylength
        0027: istore local_5
        0029: iconst_0
        002a: istore local_6
        002c: iload local_6
        002e: iload local_5
        0030: if_icmpge +23 // 0047
        0033: aload_3
        0034: iload local_6
        0036: baload
        0037: aload local_4
        0039: iload local_6
        003b: baload
        003c: if_icmpeq +5 // 0041
        003f: iconst_0
        0040: ireturn
        0041: iinc local_6, 1
        0044: goto -24 // 002c
        0047: goto +20 // 005b
        004a: aload_0
        004b: invokevirtual #33 // boolean String.isLatin1()
        004e: ifne +5 // 0053
        0051: iconst_0
        0052: ireturn
        0053: aload_3
        0054: aload local_4
        0056: iload_2
        0057: invokestatic #62 // boolean StringUTF16.contentEquals(byte[], byte[], int)
        005a: ireturn
        005b: iconst_1
        005c: ireturn
    }
    
    public boolean contentEquals(CharSequence) {
        // max_stack: 3
        // max_locals: 5
        0000: aload_1
        0001: instanceof #63 // AbstractStringBuilder
        0004: ifeq +39 // 002b
        0007: aload_1
        0008: instanceof #64 // StringBuffer
        000b: ifeq +23 // 0022
        000e: aload_1
        000f: dup
        0010: astore_2
        0011: monitorenter
        0012: aload_0
        0013: aload_1
        0014: checkcast #63 // AbstractStringBuilder
        0017: invokevirtual #65 // boolean String.nonSyncContentEquals(AbstractStringBuilder)
        001a: aload_2
        001b: monitorexit
        001c: ireturn
        001d: astore_3
        001e: aload_2
        001f: monitorexit
        0020: aload_3
        0021: athrow
        0022: aload_0
        0023: aload_1
        0024: checkcast #63 // AbstractStringBuilder
        0027: invokevirtual #65 // boolean String.nonSyncContentEquals(AbstractStringBuilder)
        002a: ireturn
        002b: aload_1
        002c: instanceof #11 // String
        002f: ifeq +9 // 0038
        0032: aload_0
        0033: aload_1
        0034: invokevirtual #66 // boolean String.equals(Object)
        0037: ireturn
        0038: aload_1
        0039: invokeinterface #67 // int CharSequence.length()
        003e: istore_2
        003f: iload_2
        0040: aload_0
        0041: invokevirtual #38 // int String.length()
        0044: if_icmpeq +5 // 0049
        0047: iconst_0
        0048: ireturn
        0049: aload_0
        004a: getfield #3 // byte[] String.value
        004d: astore_3
        004e: aload_0
        004f: invokevirtual #33 // boolean String.isLatin1()
        0052: ifeq +42 // 007c
        0055: iconst_0
        0056: istore local_4
        0058: iload local_4
        005a: iload_2
        005b: if_icmpge +30 // 0079
        005e: aload_3
        005f: iload local_4
        0061: baload
        0062: sipush 255
        0065: iand
        0066: aload_1
        0067: iload local_4
        0069: invokeinterface #68 // char CharSequence.charAt(int)
        006e: if_icmpeq +5 // 0073
        0071: iconst_0
        0072: ireturn
        0073: iinc local_4, 1
        0076: goto -30 // 0058
        0079: goto +14 // 0087
        007c: aload_3
        007d: aload_1
        007e: iload_2
        007f: invokestatic #69 // boolean StringUTF16.contentEquals(byte[], CharSequence, int)
        0082: ifne +5 // 0087
        0085: iconst_0
        0086: ireturn
        0087: iconst_1
        0088: ireturn
    }
    
    public boolean equalsIgnoreCase(String) {
        // max_stack: 6
        // max_locals: 2
        0000: aload_0
        0001: aload_1
        0002: if_acmpne +7 // 0009
        0005: iconst_1
        0006: goto +38 // 002c
        0009: aload_1
        000a: ifnull +33 // 002b
        000d: aload_1
        000e: invokevirtual #38 // int String.length()
        0011: aload_0
        0012: invokevirtual #38 // int String.length()
        0015: if_icmpne +22 // 002b
        0018: aload_0
        0019: iconst_1
        001a: iconst_0
        001b: aload_1
        001c: iconst_0
        001d: aload_0
        001e: invokevirtual #38 // int String.length()
        0021: invokevirtual #70 // boolean String.regionMatches(boolean, int, String, int, int)
        0024: ifeq +7 // 002b
        0027: iconst_1
        0028: goto +4 // 002c
        002b: iconst_0
        002c: ireturn
    }
    
    public int compareTo(String) {
        // max_stack: 2
        // max_locals: 4
        0000: aload_0
        0001: getfield #3 // byte[] String.value
        0004: astore_2
        0005: aload_1
        0006: getfield #3 // byte[] String.value
        0009: astore_3
        000a: aload_0
        000b: invokevirtual #32 // byte String.coder()
        000e: aload_1
        000f: invokevirtual #32 // byte String.coder()
        0012: if_icmpne +24 // 002a
        0015: aload_0
        0016: invokevirtual #33 // boolean String.isLatin1()
        0019: ifeq +11 // 0024
        001c: aload_2
        001d: aload_3
        001e: invokestatic #71 // int StringLatin1.compareTo(byte[], byte[])
        0021: goto +8 // 0029
        0024: aload_2
        0025: aload_3
        0026: invokestatic #72 // int StringUTF16.compareTo(byte[], byte[])
        0029: ireturn
        002a: aload_0
        002b: invokevirtual #33 // boolean String.isLatin1()
        002e: ifeq +11 // 0039
        0031: aload_2
        0032: aload_3
        0033: invokestatic #73 // int StringLatin1.compareToUTF16(byte[], byte[])
        0036: goto +8 // 003e
        0039: aload_2
        003a: aload_3
        003b: invokestatic #74 // int StringUTF16.compareToLatin1(byte[], byte[])
        003e: ireturn
    }
    
    public int compareToIgnoreCase(String) {
        // max_stack: 3
        // max_locals: 2
        0000: getstatic #75 // java.util.Comparator String.CASE_INSENSITIVE_ORDER
        0003: aload_0
        0004: aload_1
        0005: invokeinterface #76 // int java.util.Comparator.compare(Object, Object)
        000a: ireturn
    }
    
    public boolean regionMatches(int, String, int, int) {
        // max_stack: 6
        // max_locals: 7
        0000: aload_0
        0001: getfield #3 // byte[] String.value
        0004: astore local_5
        0006: aload_2
        0007: getfield #3 // byte[] String.value
        000a: astore local_6
        000c: iload_3
        000d: iflt +37 // 0032
        0010: iload_1
        0011: iflt +33 // 0032
        0014: iload_1
        0015: i2l
        0016: aload_0
        0017: invokevirtual #38 // int String.length()
        001a: i2l
        001b: iload local_4
        001d: i2l
        001e: lsub
        001f: lcmp
        0020: ifgt +18 // 0032
        0023: iload_3
        0024: i2l
        0025: aload_2
        0026: invokevirtual #38 // int String.length()
        0029: i2l
        002a: iload local_4
        002c: i2l
        002d: lsub
        002e: lcmp
        002f: ifle +5 // 0034
        0032: iconst_0
        0033: ireturn
        0034: aload_0
        0035: invokevirtual #32 // byte String.coder()
        0038: aload_2
        0039: invokevirtual #32 // byte String.coder()
        003c: if_icmpne +56 // 0074
        003f: aload_0
        0040: invokevirtual #33 // boolean String.isLatin1()
        0043: ifne +22 // 0059
        0046: iload local_4
        0048: ifle +17 // 0059
        004b: iload_1
        004c: iconst_1
        004d: ishl
        004e: istore_1
        004f: iload_3
        0050: iconst_1
        0051: ishl
        0052: istore_3
        0053: iload local_4
        0055: iconst_1
        0056: ishl
        0057: istore local_4
        0059: iload local_4
        005b: iinc local_4, -1
        005e: ifle +91 // 00b9
        0061: aload local_5
        0063: iload_1
        0064: iinc local_1, 1
        0067: baload
        0068: aload local_6
        006a: iload_3
        006b: iinc local_3, 1
        006e: baload
        006f: if_icmpeq -22 // 0059
        0072: iconst_0
        0073: ireturn
        0074: aload_0
        0075: invokevirtual #32 // byte String.coder()
        0078: ifne +34 // 009a
        007b: iload local_4
        007d: iinc local_4, -1
        0080: ifle +57 // 00b9
        0083: aload local_5
        0085: iload_1
        0086: iinc local_1, 1
        0089: invokestatic #77 // char StringLatin1.getChar(byte[], int)
        008c: aload local_6
        008e: iload_3
        008f: iinc local_3, 1
        0092: invokestatic #78 // char StringUTF16.getChar(byte[], int)
        0095: if_icmpeq -26 // 007b
        0098: iconst_0
        0099: ireturn
        009a: iload local_4
        009c: iinc local_4, -1
        009f: ifle +26 // 00b9
        00a2: aload local_5
        00a4: iload_1
        00a5: iinc local_1, 1
        00a8: invokestatic #78 // char StringUTF16.getChar(byte[], int)
        00ab: aload local_6
        00ad: iload_3
        00ae: iinc local_3, 1
        00b1: invokestatic #77 // char StringLatin1.getChar(byte[], int)
        00b4: if_icmpeq -26 // 009a
        00b7: iconst_0
        00b8: ireturn
        00b9: iconst_1
        00ba: ireturn
    }
    
    public boolean regionMatches(boolean, int, String, int, int) {
        // max_stack: 6
        // max_locals: 8
        0000: iload_1
        0001: ifne +14 // 000f
        0004: aload_0
        0005: iload_2
        0006: aload_3
        0007: iload local_4
        0009: iload local_5
        000b: invokevirtual #79 // boolean String.regionMatches(int, String, int, int)
        000e: ireturn
        000f: iload local_4
        0011: iflt +38 // 0037
        0014: iload_2
        0015: iflt +34 // 0037
        0018: iload_2
        0019: i2l
        001a: aload_0
        001b: invokevirtual #38 // int String.length()
        001e: i2l
        001f: iload local_5
        0021: i2l
        0022: lsub
        0023: lcmp
        0024: ifgt +19 // 0037
        0027: iload local_4
        0029: i2l
        002a: aload_3
        002b: invokevirtual #38 // int String.length()
        002e: i2l
        002f: iload local_5
        0031: i2l
        0032: lsub
        0033: lcmp
        0034: ifle +5 // 0039
        0037: iconst_0
        0038: ireturn
        0039: aload_0
        003a: getfield #3 // byte[] String.value
        003d: astore local_6
        003f: aload_3
        0040: getfield #3 // byte[] String.value
        0043: astore local_7
        0045: aload_0
        0046: invokevirtual #32 // byte String.coder()
        0049: aload_3
        004a: invokevirtual #32 // byte String.coder()
        004d: if_icmpne +38 // 0073
        0050: aload_0
        0051: invokevirtual #33 // boolean String.isLatin1()
        0054: ifeq +18 // 0066
        0057: aload local_6
        0059: iload_2
        005a: aload local_7
        005c: iload local_4
        005e: iload local_5
        0060: invokestatic #80 // boolean StringLatin1.regionMatchesCI(byte[], int, byte[], int, int)
        0063: goto +15 // 0072
        0066: aload local_6
        0068: iload_2
        0069: aload local_7
        006b: iload local_4
        006d: iload local_5
        006f: invokestatic #81 // boolean StringUTF16.regionMatchesCI(byte[], int, byte[], int, int)
        0072: ireturn
        0073: aload_0
        0074: invokevirtual #33 // boolean String.isLatin1()
        0077: ifeq +18 // 0089
        007a: aload local_6
        007c: iload_2
        007d: aload local_7
        007f: iload local_4
        0081: iload local_5
        0083: invokestatic #82 // boolean StringLatin1.regionMatchesCI_UTF16(byte[], int, byte[], int, int)
        0086: goto +15 // 0095
        0089: aload local_6
        008b: iload_2
        008c: aload local_7
        008e: iload local_4
        0090: iload local_5
        0092: invokestatic #83 // boolean StringUTF16.regionMatchesCI_Latin1(byte[], int, byte[], int, int)
        0095: ireturn
    }
    
    public boolean startsWith(String, int) {
        // max_stack: 3
        // max_locals: 8
        0000: iload_2
        0001: iflt +16 // 0011
        0004: iload_2
        0005: aload_0
        0006: invokevirtual #38 // int String.length()
        0009: aload_1
        000a: invokevirtual #38 // int String.length()
        000d: isub
        000e: if_icmple +5 // 0013
        0011: iconst_0
        0012: ireturn
        0013: aload_0
        0014: getfield #3 // byte[] String.value
        0017: astore_3
        0018: aload_1
        0019: getfield #3 // byte[] String.value
        001c: astore local_4
        001e: iconst_0
        001f: istore local_5
        0021: aload local_4
        0023: arraylength
        0024: istore local_6
        0026: aload_0
        0027: invokevirtual #32 // byte String.coder()
        002a: aload_1
        002b: invokevirtual #32 // byte String.coder()
        002e: if_icmpne +49 // 005f
        0031: aload_0
        0032: invokevirtual #33 // boolean String.isLatin1()
        0035: ifeq +7 // 003c
        0038: iload_2
        0039: goto +6 // 003f
        003c: iload_2
        003d: iconst_1
        003e: ishl
        003f: istore local_7
        0041: iload local_5
        0043: iload local_6
        0045: if_icmpge +23 // 005c
        0048: aload_3
        0049: iload local_7
        004b: iinc local_7, 1
        004e: baload
        004f: aload local_4
        0051: iload local_5
        0053: iinc local_5, 1
        0056: baload
        0057: if_icmpeq -22 // 0041
        005a: iconst_0
        005b: ireturn
        005c: goto +44 // 0088
        005f: aload_0
        0060: invokevirtual #33 // boolean String.isLatin1()
        0063: ifeq +5 // 0068
        0066: iconst_0
        0067: ireturn
        0068: iload local_5
        006a: iload local_6
        006c: if_icmpge +28 // 0088
        006f: aload_3
        0070: iload_2
        0071: iinc local_2, 1
        0074: invokestatic #78 // char StringUTF16.getChar(byte[], int)
        0077: aload local_4
        0079: iload local_5
        007b: iinc local_5, 1
        007e: baload
        007f: sipush 255
        0082: iand
        0083: if_icmpeq -27 // 0068
        0086: iconst_0
        0087: ireturn
        0088: iconst_1
        0089: ireturn
    }
    
    public boolean startsWith(String) {
        // max_stack: 3
        // max_locals: 2
        0000: aload_0
        0001: aload_1
        0002: iconst_0
        0003: invokevirtual #84 // boolean String.startsWith(String, int)
        0006: ireturn
    }
    
    public boolean endsWith(String) {
        // max_stack: 4
        // max_locals: 2
        0000: aload_0
        0001: aload_1
        0002: aload_0
        0003: invokevirtual #38 // int String.length()
        0006: aload_1
        0007: invokevirtual #38 // int String.length()
        000a: isub
        000b: invokevirtual #84 // boolean String.startsWith(String, int)
        000e: ireturn
    }
    
    public int hashCode() {
        // max_stack: 3
        // max_locals: 2
        0000: aload_0
        0001: getfield #5 // int String.hash
        0004: istore_1
        0005: iload_1
        0006: ifne +41 // 002f
        0009: aload_0
        000a: getfield #3 // byte[] String.value
        000d: arraylength
        000e: ifle +33 // 002f
        0011: aload_0
        0012: aload_0
        0013: invokevirtual #33 // boolean String.isLatin1()
        0016: ifeq +13 // 0023
        0019: aload_0
        001a: getfield #3 // byte[] String.value
        001d: invokestatic #85 // int StringLatin1.hashCode(byte[])
        0020: goto +10 // 002a
        0023: aload_0
        0024: getfield #3 // byte[] String.value
        0027: invokestatic #86 // int StringUTF16.hashCode(byte[])
        002a: dup
        002b: istore_1
        002c: putfield #5 // int String.hash
        002f: iload_1
        0030: ireturn
    }
    
    public int indexOf(int) {
        // max_stack: 3
        // max_locals: 2
        0000: aload_0
        0001: iload_1
        0002: iconst_0
        0003: invokevirtual #87 // int String.indexOf(int, int)
        0006: ireturn
    }
    
    public int indexOf(int, int) {
        // max_stack: 3
        // max_locals: 3
        0000: aload_0
        0001: invokevirtual #33 // boolean String.isLatin1()
        0004: ifeq +15 // 0013
        0007: aload_0
        0008: getfield #3 // byte[] String.value
        000b: iload_1
        000c: iload_2
        000d: invokestatic #88 // int StringLatin1.indexOf(byte[], int, int)
        0010: goto +12 // 001c
        0013: aload_0
        0014: getfield #3 // byte[] String.value
        0017: iload_1
        0018: iload_2
        0019: invokestatic #89 // int StringUTF16.indexOf(byte[], int, int)
        001c: ireturn
    }
    
    public int lastIndexOf(int) {
        // max_stack: 4
        // max_locals: 2
        0000: aload_0
        0001: iload_1
        0002: aload_0
        0003: invokevirtual #38 // int String.length()
        0006: iconst_1
        0007: isub
        0008: invokevirtual #90 // int String.lastIndexOf(int, int)
        000b: ireturn
    }
    
    public int lastIndexOf(int, int) {
        // max_stack: 3
        // max_locals: 3
        0000: aload_0
        0001: invokevirtual #33 // boolean String.isLatin1()
        0004: ifeq +15 // 0013
        0007: aload_0
        0008: getfield #3 // byte[] String.value
        000b: iload_1
        000c: iload_2
        000d: invokestatic #91 // int StringLatin1.lastIndexOf(byte[], int, int)
        0010: goto +12 // 001c
        0013: aload_0
        0014: getfield #3 // byte[] String.value
        0017: iload_1
        0018: iload_2
        0019: invokestatic #92 // int StringUTF16.lastIndexOf(byte[], int, int)
        001c: ireturn
    }
    
    public int indexOf(String) {
        // max_stack: 2
        // max_locals: 2
        0000: aload_0
        0001: invokevirtual #32 // byte String.coder()
        0004: aload_1
        0005: invokevirtual #32 // byte String.coder()
        0008: if_icmpne +36 // 002c
        000b: aload_0
        000c: invokevirtual #33 // boolean String.isLatin1()
        000f: ifeq +17 // 0020
        0012: aload_0
        0013: getfield #3 // byte[] String.value
        0016: aload_1
        0017: getfield #3 // byte[] String.value
        001a: invokestatic #93 // int StringLatin1.indexOf(byte[], byte[])
        001d: goto +14 // 002b
        0020: aload_0
        0021: getfield #3 // byte[] String.value
        0024: aload_1
        0025: getfield #3 // byte[] String.value
        0028: invokestatic #94 // int StringUTF16.indexOf(byte[], byte[])
        002b: ireturn
        002c: aload_0
        002d: invokevirtual #32 // byte String.coder()
        0030: ifne +5 // 0035
        0033: iconst_m1
        0034: ireturn
        0035: aload_0
        0036: getfield #3 // byte[] String.value
        0039: aload_1
        003a: getfield #3 // byte[] String.value
        003d: invokestatic #95 // int StringUTF16.indexOfLatin1(byte[], byte[])
        0040: ireturn
    }
    
    public int indexOf(String, int) {
        // max_stack: 5
        // max_locals: 3
        0000: aload_0
        0001: getfield #3 // byte[] String.value
        0004: aload_0
        0005: invokevirtual #32 // byte String.coder()
        0008: aload_0
        0009: invokevirtual #38 // int String.length()
        000c: aload_1
        000d: iload_2
        000e: invokestatic #96 // int String.indexOf(byte[], byte, int, String, int)
        0011: ireturn
    }
    
    static int indexOf(byte[], byte, int, String, int) {
        // max_stack: 5
        // max_locals: 8
        0000: aload_3
        0001: getfield #3 // byte[] String.value
        0004: astore local_5
        0006: aload_3
        0007: invokevirtual #32 // byte String.coder()
        000a: istore local_6
        000c: aload_3
        000d: invokevirtual #38 // int String.length()
        0010: istore local_7
        0012: iload local_4
        0014: iload_2
        0015: if_icmplt +14 // 0023
        0018: iload local_7
        001a: ifne +7 // 0021
        001d: iload_2
        001e: goto +4 // 0022
        0021: iconst_m1
        0022: ireturn
        0023: iload local_4
        0025: ifge +6 // 002b
        0028: iconst_0
        0029: istore local_4
        002b: iload local_7
        002d: ifne +6 // 0033
        0030: iload local_4
        0032: ireturn
        0033: iload local_7
        0035: iload_2
        0036: if_icmple +5 // 003b
        0039: iconst_m1
        003a: ireturn
        003b: iload_1
        003c: iload local_6
        003e: if_icmpne +33 // 005f
        0041: iload_1
        0042: ifne +17 // 0053
        0045: aload_0
        0046: iload_2
        0047: aload local_5
        0049: iload local_7
        004b: iload local_4
        004d: invokestatic #97 // int StringLatin1.indexOf(byte[], int, byte[], int, int)
        0050: goto +14 // 005e
        0053: aload_0
        0054: iload_2
        0055: aload local_5
        0057: iload local_7
        0059: iload local_4
        005b: invokestatic #98 // int StringUTF16.indexOf(byte[], int, byte[], int, int)
        005e: ireturn
        005f: iload_1
        0060: ifne +5 // 0065
        0063: iconst_m1
        0064: ireturn
        0065: aload_0
        0066: iload_2
        0067: aload local_5
        0069: iload local_7
        006b: iload local_4
        006d: invokestatic #99 // int StringUTF16.indexOfLatin1(byte[], int, byte[], int, int)
        0070: ireturn
    }
    
    public int lastIndexOf(String) {
        // max_stack: 3
        // max_locals: 2
        0000: aload_0
        0001: aload_1
        0002: aload_0
        0003: invokevirtual #38 // int String.length()
        0006: invokevirtual #100 // int String.lastIndexOf(String, int)
        0009: ireturn
    }
    
    public int lastIndexOf(String, int) {
        // max_stack: 5
        // max_locals: 3
        0000: aload_0
        0001: getfield #3 // byte[] String.value
        0004: aload_0
        0005: invokevirtual #32 // byte String.coder()
        0008: aload_0
        0009: invokevirtual #38 // int String.length()
        000c: aload_1
        000d: iload_2
        000e: invokestatic #101 // int String.lastIndexOf(byte[], byte, int, String, int)
        0011: ireturn
    }
    
    static int lastIndexOf(byte[], byte, int, String, int) {
        // max_stack: 5
        // max_locals: 9
        0000: aload_3
        0001: getfield #3 // byte[] String.value
        0004: astore local_5
        0006: aload_3
        0007: invokevirtual #32 // byte String.coder()
        000a: istore local_6
        000c: aload_3
        000d: invokevirtual #38 // int String.length()
        0010: istore local_7
        0012: iload_2
        0013: iload local_7
        0015: isub
        0016: istore local_8
        0018: iload local_4
        001a: iload local_8
        001c: if_icmple +7 // 0023
        001f: iload local_8
        0021: istore local_4
        0023: iload local_4
        0025: ifge +5 // 002a
        0028: iconst_m1
        0029: ireturn
        002a: iload local_7
        002c: ifne +6 // 0032
        002f: iload local_4
        0031: ireturn
        0032: iload_1
        0033: iload local_6
        0035: if_icmpne +33 // 0056
        0038: iload_1
        0039: ifne +17 // 004a
        003c: aload_0
        003d: iload_2
        003e: aload local_5
        0040: iload local_7
        0042: iload local_4
        0044: invokestatic #102 // int StringLatin1.lastIndexOf(byte[], int, byte[], int, int)
        0047: goto +14 // 0055
        004a: aload_0
        004b: iload_2
        004c: aload local_5
        004e: iload local_7
        0050: iload local_4
        0052: invokestatic #103 // int StringUTF16.lastIndexOf(byte[], int, byte[], int, int)
        0055: ireturn
        0056: iload_1
        0057: ifne +5 // 005c
        005a: iconst_m1
        005b: ireturn
        005c: aload_0
        005d: iload_2
        005e: aload local_5
        0060: iload local_7
        0062: iload local_4
        0064: invokestatic #104 // int StringUTF16.lastIndexOfLatin1(byte[], int, byte[], int, int)
        0067: ireturn
    }
    
    public String substring(int) {
        // max_stack: 3
        // max_locals: 3
        0000: iload_1
        0001: ifge +12 // 000d
        0004: new #39 // StringIndexOutOfBoundsException
        0007: dup
        0008: iload_1
        0009: invokespecial #40 // void StringIndexOutOfBoundsException.<init>(int)
        000c: athrow
        000d: aload_0
        000e: invokevirtual #38 // int String.length()
        0011: iload_1
        0012: isub
        0013: istore_2
        0014: iload_2
        0015: ifge +12 // 0021
        0018: new #39 // StringIndexOutOfBoundsException
        001b: dup
        001c: iload_2
        001d: invokespecial #40 // void StringIndexOutOfBoundsException.<init>(int)
        0020: athrow
        0021: iload_1
        0022: ifne +5 // 0027
        0025: aload_0
        0026: areturn
        0027: aload_0
        0028: invokevirtual #33 // boolean String.isLatin1()
        002b: ifeq +15 // 003a
        002e: aload_0
        002f: getfield #3 // byte[] String.value
        0032: iload_1
        0033: iload_2
        0034: invokestatic #105 // String StringLatin1.newString(byte[], int, int)
        0037: goto +12 // 0043
        003a: aload_0
        003b: getfield #3 // byte[] String.value
        003e: iload_1
        003f: iload_2
        0040: invokestatic #106 // String StringUTF16.newString(byte[], int, int)
        0043: areturn
    }
    
    public String substring(int, int) {
        // max_stack: 3
        // max_locals: 5
        0000: aload_0
        0001: invokevirtual #38 // int String.length()
        0004: istore_3
        0005: iload_1
        0006: iload_2
        0007: iload_3
        0008: invokestatic #46 // void String.checkBoundsBeginEnd(int, int, int)
        000b: iload_2
        000c: iload_1
        000d: isub
        000e: istore local_4
        0010: iload_1
        0011: ifne +10 // 001b
        0014: iload_2
        0015: iload_3
        0016: if_icmpne +5 // 001b
        0019: aload_0
        001a: areturn
        001b: aload_0
        001c: invokevirtual #33 // boolean String.isLatin1()
        001f: ifeq +16 // 002f
        0022: aload_0
        0023: getfield #3 // byte[] String.value
        0026: iload_1
        0027: iload local_4
        0029: invokestatic #105 // String StringLatin1.newString(byte[], int, int)
        002c: goto +13 // 0039
        002f: aload_0
        0030: getfield #3 // byte[] String.value
        0033: iload_1
        0034: iload local_4
        0036: invokestatic #106 // String StringUTF16.newString(byte[], int, int)
        0039: areturn
    }
    
    public CharSequence subSequence(int, int) {
        // max_stack: 3
        // max_locals: 3
        0000: aload_0
        0001: iload_1
        0002: iload_2
        0003: invokevirtual #107 // String String.substring(int, int)
        0006: areturn
    }
    
    public String concat(String) {
        // max_stack: 5
        // max_locals: 7
        0000: aload_1
        0001: invokevirtual #38 // int String.length()
        0004: istore_2
        0005: iload_2
        0006: ifne +5 // 000b
        0009: aload_0
        000a: areturn
        000b: aload_0
        000c: invokevirtual #32 // byte String.coder()
        000f: aload_1
        0010: invokevirtual #32 // byte String.coder()
        0013: if_icmpne +57 // 004c
        0016: aload_0
        0017: getfield #3 // byte[] String.value
        001a: astore_3
        001b: aload_1
        001c: getfield #3 // byte[] String.value
        001f: astore local_4
        0021: aload_3
        0022: arraylength
        0023: aload local_4
        0025: arraylength
        0026: iadd
        0027: istore local_5
        0029: aload_3
        002a: iload local_5
        002c: invokestatic #108 // byte[] java.util.Arrays.copyOf(byte[], int)
        002f: astore local_6
        0031: aload local_4
        0033: iconst_0
        0034: aload local_6
        0036: aload_3
        0037: arraylength
        0038: aload local_4
        003a: arraylength
        003b: invokestatic #109 // void System.arraycopy(Object, int, Object, int, int)
        003e: new #11 // String
        0041: dup
        0042: aload local_6
        0044: aload_0
        0045: getfield #4 // byte String.coder
        0048: invokespecial #110 // void String.<init>(byte[], byte)
        004b: areturn
        004c: aload_0
        004d: invokevirtual #38 // int String.length()
        0050: istore_3
        0051: iload_3
        0052: iload_2
        0053: iadd
        0054: invokestatic #14 // byte[] StringUTF16.newBytesFor(int)
        0057: astore local_4
        0059: aload_0
        005a: aload local_4
        005c: iconst_0
        005d: iconst_1
        005e: invokevirtual #111 // void String.getBytes(byte[], int, byte)
        0061: aload_1
        0062: aload local_4
        0064: iload_3
        0065: iconst_1
        0066: invokevirtual #111 // void String.getBytes(byte[], int, byte)
        0069: new #11 // String
        006c: dup
        006d: aload local_4
        006f: iconst_1
        0070: invokespecial #110 // void String.<init>(byte[], byte)
        0073: areturn
    }
    
    public String replace(char, char) {
        // max_stack: 3
        // max_locals: 4
        0000: iload_1
        0001: iload_2
        0002: if_icmpeq +38 // 0028
        0005: aload_0
        0006: invokevirtual #33 // boolean String.isLatin1()
        0009: ifeq +15 // 0018
        000c: aload_0
        000d: getfield #3 // byte[] String.value
        0010: iload_1
        0011: iload_2
        0012: invokestatic #112 // String StringLatin1.replace(byte[], char, char)
        0015: goto +12 // 0021
        0018: aload_0
        0019: getfield #3 // byte[] String.value
        001c: iload_1
        001d: iload_2
        001e: invokestatic #113 // String StringUTF16.replace(byte[], char, char)
        0021: astore_3
        0022: aload_3
        0023: ifnull +5 // 0028
        0026: aload_3
        0027: areturn
        0028: aload_0
        0029: areturn
    }
    
    public boolean matches(String) {
        // max_stack: 2
        // max_locals: 2
        0000: aload_1
        0001: aload_0
        0002: invokestatic #114 // boolean java.util.regex.Pattern.matches(String, CharSequence)
        0005: ireturn
    }
    
    public boolean contains(CharSequence) {
        // max_stack: 2
        // max_locals: 2
        0000: aload_0
        0001: aload_1
        0002: invokeinterface #115 // String CharSequence.toString()
        0007: invokevirtual #116 // int String.indexOf(String)
        000a: iflt +7 // 0011
        000d: iconst_1
        000e: goto +4 // 0012
        0011: iconst_0
        0012: ireturn
    }
    
    public String replaceFirst(String, String) {
        // max_stack: 2
        // max_locals: 3
        0000: aload_1
        0001: invokestatic #117 // java.util.regex.Pattern java.util.regex.Pattern.compile(String)
        0004: aload_0
        0005: invokevirtual #118 // java.util.regex.Matcher java.util.regex.Pattern.matcher(CharSequence)
        0008: aload_2
        0009: invokevirtual #119 // String java.util.regex.Matcher.replaceFirst(String)
        000c: areturn
    }
    
    public String replaceAll(String, String) {
        // max_stack: 2
        // max_locals: 3
        0000: aload_1
        0001: invokestatic #117 // java.util.regex.Pattern java.util.regex.Pattern.compile(String)
        0004: aload_0
        0005: invokevirtual #118 // java.util.regex.Matcher java.util.regex.Pattern.matcher(CharSequence)
        0008: aload_2
        0009: invokevirtual #120 // String java.util.regex.Matcher.replaceAll(String)
        000c: areturn
    }
    
    public String replace(CharSequence, CharSequence) {
        // max_stack: 4
        // max_locals: 12
        0000: aload_1
        0001: invokeinterface #115 // String CharSequence.toString()
        0006: astore_3
        0007: aload_2
        0008: invokeinterface #115 // String CharSequence.toString()
        000d: astore local_4
        000f: aload_0
        0010: aload_3
        0011: invokevirtual #116 // int String.indexOf(String)
        0014: istore local_5
        0016: iload local_5
        0018: ifge +5 // 001d
        001b: aload_0
        001c: areturn
        001d: aload_3
        001e: invokevirtual #38 // int String.length()
        0021: istore local_6
        0023: iload local_6
        0025: iconst_1
        0026: invokestatic #121 // int Math.max(int, int)
        0029: istore local_7
        002b: aload_0
        002c: invokevirtual #38 // int String.length()
        002f: istore local_8
        0031: iload local_8
        0033: iload local_6
        0035: isub
        0036: aload local_4
        0038: invokevirtual #38 // int String.length()
        003b: iadd
        003c: istore local_9
        003e: iload local_9
        0040: ifge +11 // 004b
        0043: new #122 // OutOfMemoryError
        0046: dup
        0047: invokespecial #123 // void OutOfMemoryError.<init>()
        004a: athrow
        004b: new #124 // StringBuilder
        004e: dup
        004f: iload local_9
        0051: invokespecial #125 // void StringBuilder.<init>(int)
        0054: astore local_10
        0056: iconst_0
        0057: istore local_11
        0059: aload local_10
        005b: aload_0
        005c: iload local_11
        005e: iload local_5
        0060: invokevirtual #126 // StringBuilder StringBuilder.append(CharSequence, int, int)
        0063: aload local_4
        0065: invokevirtual #127 // StringBuilder StringBuilder.append(String)
        0068: pop
        0069: iload local_5
        006b: iload local_6
        006d: iadd
        006e: istore local_11
        0070: iload local_5
        0072: iload local_8
        0074: if_icmpge +19 // 0087
        0077: aload_0
        0078: aload_3
        0079: iload local_5
        007b: iload local_7
        007d: iadd
        007e: invokevirtual #128 // int String.indexOf(String, int)
        0081: dup
        0082: istore local_5
        0084: ifgt -43 // 0059
        0087: aload local_10
        0089: aload_0
        008a: iload local_11
        008c: iload local_8
        008e: invokevirtual #126 // StringBuilder StringBuilder.append(CharSequence, int, int)
        0091: invokevirtual #129 // String StringBuilder.toString()
        0094: areturn
    }
    
    public String[] split(String, int) {
        // max_stack: 4
        // max_locals: 10
        0000: iconst_0
        0001: istore_3
        0002: aload_1
        0003: invokevirtual #38 // int String.length()
        0006: iconst_1
        0007: if_icmpne +19 // 001a
        000a: ldc #130 // ".$|()[{^?*+\\"
        000c: aload_1
        000d: iconst_0
        000e: invokevirtual #131 // char String.charAt(int)
        0011: dup
        0012: istore_3
        0013: invokevirtual #132 // int String.indexOf(int)
        0016: iconst_m1
        0017: if_icmpeq +63 // 0056
        001a: aload_1
        001b: invokevirtual #38 // int String.length()
        001e: iconst_2
        001f: if_icmpne +283 // 013a
        0022: aload_1
        0023: iconst_0
        0024: invokevirtual #131 // char String.charAt(int)
        0027: bipush 92
        0029: if_icmpne +273 // 013a
        002c: aload_1
        002d: iconst_1
        002e: invokevirtual #131 // char String.charAt(int)
        0031: dup
        0032: istore_3
        0033: bipush 48
        0035: isub
        0036: bipush 57
        0038: iload_3
        0039: isub
        003a: ior
        003b: ifge +255 // 013a
        003e: iload_3
        003f: bipush 97
        0041: isub
        0042: bipush 122
        0044: iload_3
        0045: isub
        0046: ior
        0047: ifge +243 // 013a
        004a: iload_3
        004b: bipush 65
        004d: isub
        004e: bipush 90
        0050: iload_3
        0051: isub
        0052: ior
        0053: ifge +231 // 013a
        0056: iload_3
        0057: ldc #134 // 55296
        0059: if_icmplt +9 // 0062
        005c: iload_3
        005d: ldc #135 // 57343
        005f: if_icmple +219 // 013a
        0062: iconst_0
        0063: istore local_4
        0065: iconst_0
        0066: istore local_5
        0068: iload_2
        0069: ifle +7 // 0070
        006c: iconst_1
        006d: goto +4 // 0071
        0070: iconst_0
        0071: istore local_6
        0073: new #136 // java.util.ArrayList
        0076: dup
        0077: invokespecial #137 // void java.util.ArrayList.<init>()
        007a: astore local_7
        007c: aload_0
        007d: iload_3
        007e: iload local_4
        0080: invokevirtual #87 // int String.indexOf(int, int)
        0083: dup
        0084: istore local_5
        0086: iconst_m1
        0087: if_icmpeq +69 // 00cc
        008a: iload local_6
        008c: ifeq +14 // 009a
        008f: aload local_7
        0091: invokevirtual #138 // int java.util.ArrayList.size()
        0094: iload_2
        0095: iconst_1
        0096: isub
        0097: if_icmpge +26 // 00b1
        009a: aload local_7
        009c: aload_0
        009d: iload local_4
        009f: iload local_5
        00a1: invokevirtual #107 // String String.substring(int, int)
        00a4: invokevirtual #139 // boolean java.util.ArrayList.add(Object)
        00a7: pop
        00a8: iload local_5
        00aa: iconst_1
        00ab: iadd
        00ac: istore local_4
        00ae: goto -50 // 007c
        00b1: aload_0
        00b2: invokevirtual #38 // int String.length()
        00b5: istore local_8
        00b7: aload local_7
        00b9: aload_0
        00ba: iload local_4
        00bc: iload local_8
        00be: invokevirtual #107 // String String.substring(int, int)
        00c1: invokevirtual #139 // boolean java.util.ArrayList.add(Object)
        00c4: pop
        00c5: iload local_8
        00c7: istore local_4
        00c9: goto +3 // 00cc
        00cc: iload local_4
        00ce: ifne +12 // 00da
        00d1: iconst_1
        00d2: anewarray #11 // String
        00d5: dup
        00d6: iconst_0
        00d7: aload_0
        00d8: aastore
        00d9: areturn
        00da: iload local_6
        00dc: ifeq +12 // 00e8
        00df: aload local_7
        00e1: invokevirtual #138 // int java.util.ArrayList.size()
        00e4: iload_2
        00e5: if_icmpge +19 // 00f8
        00e8: aload local_7
        00ea: aload_0
        00eb: iload local_4
        00ed: aload_0
        00ee: invokevirtual #38 // int String.length()
        00f1: invokevirtual #107 // String String.substring(int, int)
        00f4: invokevirtual #139 // boolean java.util.ArrayList.add(Object)
        00f7: pop
        00f8: aload local_7
        00fa: invokevirtual #138 // int java.util.ArrayList.size()
        00fd: istore local_8
        00ff: iload_2
        0100: ifne +32 // 0120
        0103: iload local_8
        0105: ifle +27 // 0120
        0108: aload local_7
        010a: iload local_8
        010c: iconst_1
        010d: isub
        010e: invokevirtual #140 // Object java.util.ArrayList.get(int)
        0111: checkcast #11 // String
        0114: invokevirtual #38 // int String.length()
        0117: ifne +9 // 0120
        011a: iinc local_8, -1
        011d: goto -26 // 0103
        0120: iload local_8
        0122: anewarray #11 // String
        0125: astore local_9
        0127: aload local_7
        0129: iconst_0
        012a: iload local_8
        012c: invokevirtual #141 // java.util.List java.util.ArrayList.subList(int, int)
        012f: aload local_9
        0131: invokeinterface #142 // Object[] java.util.List.toArray(Object[])
        0136: checkcast #143 // [Ljava.lang.String;
        0139: areturn
        013a: aload_1
        013b: invokestatic #117 // java.util.regex.Pattern java.util.regex.Pattern.compile(String)
        013e: aload_0
        013f: iload_2
        0140: invokevirtual #144 // String[] java.util.regex.Pattern.split(CharSequence, int)
        0143: areturn
    }
    
    public String[] split(String) {
        // max_stack: 3
        // max_locals: 2
        0000: aload_0
        0001: aload_1
        0002: iconst_0
        0003: invokevirtual #145 // String[] String.split(String, int)
        0006: areturn
    }
    
    public static /* varargs */ String join(CharSequence, CharSequence[]) {
        // max_stack: 3
        // max_locals: 7
        0000: aload_0
        0001: invokestatic #49 // Object java.util.Objects.requireNonNull(Object)
        0004: pop
        0005: aload_1
        0006: invokestatic #49 // Object java.util.Objects.requireNonNull(Object)
        0009: pop
        000a: new #146 // java.util.StringJoiner
        000d: dup
        000e: aload_0
        000f: invokespecial #147 // void java.util.StringJoiner.<init>(CharSequence)
        0012: astore_2
        0013: aload_1
        0014: astore_3
        0015: aload_3
        0016: arraylength
        0017: istore local_4
        0019: iconst_0
        001a: istore local_5
        001c: iload local_5
        001e: iload local_4
        0020: if_icmpge +22 // 0036
        0023: aload_3
        0024: iload local_5
        0026: aaload
        0027: astore local_6
        0029: aload_2
        002a: aload local_6
        002c: invokevirtual #148 // java.util.StringJoiner java.util.StringJoiner.add(CharSequence)
        002f: pop
        0030: iinc local_5, 1
        0033: goto -23 // 001c
        0036: aload_2
        0037: invokevirtual #149 // String java.util.StringJoiner.toString()
        003a: areturn
    }
    
    public static String join(CharSequence, Iterable<? extends CharSequence>) {
        // max_stack: 3
        // max_locals: 5
        0000: aload_0
        0001: invokestatic #49 // Object java.util.Objects.requireNonNull(Object)
        0004: pop
        0005: aload_1
        0006: invokestatic #49 // Object java.util.Objects.requireNonNull(Object)
        0009: pop
        000a: new #146 // java.util.StringJoiner
        000d: dup
        000e: aload_0
        000f: invokespecial #147 // void java.util.StringJoiner.<init>(CharSequence)
        0012: astore_2
        0013: aload_1
        0014: invokeinterface #150 // java.util.Iterator Iterable.iterator()
        0019: astore_3
        001a: aload_3
        001b: invokeinterface #151 // boolean java.util.Iterator.hasNext()
        0020: ifeq +24 // 0038
        0023: aload_3
        0024: invokeinterface #152 // Object java.util.Iterator.next()
        0029: checkcast #153 // CharSequence
        002c: astore local_4
        002e: aload_2
        002f: aload local_4
        0031: invokevirtual #148 // java.util.StringJoiner java.util.StringJoiner.add(CharSequence)
        0034: pop
        0035: goto -27 // 001a
        0038: aload_2
        0039: invokevirtual #149 // String java.util.StringJoiner.toString()
        003c: areturn
    }
    
    public String toLowerCase(java.util.Locale) {
        // max_stack: 3
        // max_locals: 2
        0000: aload_0
        0001: invokevirtual #33 // boolean String.isLatin1()
        0004: ifeq +15 // 0013
        0007: aload_0
        0008: aload_0
        0009: getfield #3 // byte[] String.value
        000c: aload_1
        000d: invokestatic #154 // String StringLatin1.toLowerCase(String, byte[], java.util.Locale)
        0010: goto +12 // 001c
        0013: aload_0
        0014: aload_0
        0015: getfield #3 // byte[] String.value
        0018: aload_1
        0019: invokestatic #155 // String StringUTF16.toLowerCase(String, byte[], java.util.Locale)
        001c: areturn
    }
    
    public String toLowerCase() {
        // max_stack: 2
        // max_locals: 1
        0000: aload_0
        0001: invokestatic #156 // java.util.Locale java.util.Locale.getDefault()
        0004: invokevirtual #157 // String String.toLowerCase(java.util.Locale)
        0007: areturn
    }
    
    public String toUpperCase(java.util.Locale) {
        // max_stack: 3
        // max_locals: 2
        0000: aload_0
        0001: invokevirtual #33 // boolean String.isLatin1()
        0004: ifeq +15 // 0013
        0007: aload_0
        0008: aload_0
        0009: getfield #3 // byte[] String.value
        000c: aload_1
        000d: invokestatic #158 // String StringLatin1.toUpperCase(String, byte[], java.util.Locale)
        0010: goto +12 // 001c
        0013: aload_0
        0014: aload_0
        0015: getfield #3 // byte[] String.value
        0018: aload_1
        0019: invokestatic #159 // String StringUTF16.toUpperCase(String, byte[], java.util.Locale)
        001c: areturn
    }
    
    public String toUpperCase() {
        // max_stack: 2
        // max_locals: 1
        0000: aload_0
        0001: invokestatic #156 // java.util.Locale java.util.Locale.getDefault()
        0004: invokevirtual #160 // String String.toUpperCase(java.util.Locale)
        0007: areturn
    }
    
    public String trim() {
        // max_stack: 1
        // max_locals: 2
        0000: aload_0
        0001: invokevirtual #33 // boolean String.isLatin1()
        0004: ifeq +13 // 0011
        0007: aload_0
        0008: getfield #3 // byte[] String.value
        000b: invokestatic #161 // String StringLatin1.trim(byte[])
        000e: goto +10 // 0018
        0011: aload_0
        0012: getfield #3 // byte[] String.value
        0015: invokestatic #162 // String StringUTF16.trim(byte[])
        0018: astore_1
        0019: aload_1
        001a: ifnonnull +7 // 0021
        001d: aload_0
        001e: goto +4 // 0022
        0021: aload_1
        0022: areturn
    }
    
    public String strip() {
        // max_stack: 1
        // max_locals: 2
        0000: aload_0
        0001: invokevirtual #33 // boolean String.isLatin1()
        0004: ifeq +13 // 0011
        0007: aload_0
        0008: getfield #3 // byte[] String.value
        000b: invokestatic #163 // String StringLatin1.strip(byte[])
        000e: goto +10 // 0018
        0011: aload_0
        0012: getfield #3 // byte[] String.value
        0015: invokestatic #164 // String StringUTF16.strip(byte[])
        0018: astore_1
        0019: aload_1
        001a: ifnonnull +7 // 0021
        001d: aload_0
        001e: goto +4 // 0022
        0021: aload_1
        0022: areturn
    }
    
    public String stripLeading() {
        // max_stack: 1
        // max_locals: 2
        0000: aload_0
        0001: invokevirtual #33 // boolean String.isLatin1()
        0004: ifeq +13 // 0011
        0007: aload_0
        0008: getfield #3 // byte[] String.value
        000b: invokestatic #165 // String StringLatin1.stripLeading(byte[])
        000e: goto +10 // 0018
        0011: aload_0
        0012: getfield #3 // byte[] String.value
        0015: invokestatic #166 // String StringUTF16.stripLeading(byte[])
        0018: astore_1
        0019: aload_1
        001a: ifnonnull +7 // 0021
        001d: aload_0
        001e: goto +4 // 0022
        0021: aload_1
        0022: areturn
    }
    
    public String stripTrailing() {
        // max_stack: 1
        // max_locals: 2
        0000: aload_0
        0001: invokevirtual #33 // boolean String.isLatin1()
        0004: ifeq +13 // 0011
        0007: aload_0
        0008: getfield #3 // byte[] String.value
        000b: invokestatic #167 // String StringLatin1.stripTrailing(byte[])
        000e: goto +10 // 0018
        0011: aload_0
        0012: getfield #3 // byte[] String.value
        0015: invokestatic #168 // String StringUTF16.stripTrailing(byte[])
        0018: astore_1
        0019: aload_1
        001a: ifnonnull +7 // 0021
        001d: aload_0
        001e: goto +4 // 0022
        0021: aload_1
        0022: areturn
    }
    
    public boolean isBlank() {
        // max_stack: 2
        // max_locals: 1
        0000: aload_0
        0001: invokevirtual #169 // int String.indexOfNonWhitespace()
        0004: aload_0
        0005: invokevirtual #38 // int String.length()
        0008: if_icmpne +7 // 000f
        000b: iconst_1
        000c: goto +4 // 0010
        000f: iconst_0
        0010: ireturn
    }
    
    private int indexOfNonWhitespace() {
        // max_stack: 1
        // max_locals: 1
        0000: aload_0
        0001: invokevirtual #33 // boolean String.isLatin1()
        0004: ifeq +11 // 000f
        0007: aload_0
        0008: getfield #3 // byte[] String.value
        000b: invokestatic #170 // int StringLatin1.indexOfNonWhitespace(byte[])
        000e: ireturn
        000f: aload_0
        0010: getfield #3 // byte[] String.value
        0013: invokestatic #171 // int StringUTF16.indexOfNonWhitespace(byte[])
        0016: ireturn
    }
    
    public java.util.stream.Stream<String> lines() {
        // max_stack: 1
        // max_locals: 1
        0000: aload_0
        0001: invokevirtual #33 // boolean String.isLatin1()
        0004: ifeq +13 // 0011
        0007: aload_0
        0008: getfield #3 // byte[] String.value
        000b: invokestatic #172 // java.util.stream.Stream StringLatin1.lines(byte[])
        000e: goto +10 // 0018
        0011: aload_0
        0012: getfield #3 // byte[] String.value
        0015: invokestatic #173 // java.util.stream.Stream StringUTF16.lines(byte[])
        0018: areturn
    }
    
    public String toString() {
        // max_stack: 1
        // max_locals: 1
        0000: aload_0
        0001: areturn
    }
    
    public java.util.stream.IntStream chars() {
        // max_stack: 4
        // max_locals: 1
        0000: aload_0
        0001: invokevirtual #33 // boolean String.isLatin1()
        0004: ifeq +20 // 0018
        0007: new #174 // StringLatin1$CharsSpliterator
        000a: dup
        000b: aload_0
        000c: getfield #3 // byte[] String.value
        000f: sipush 1024
        0012: invokespecial #176 // void StringLatin1$CharsSpliterator.<init>(byte[], int)
        0015: goto +17 // 0026
        0018: new #177 // StringUTF16$CharsSpliterator
        001b: dup
        001c: aload_0
        001d: getfield #3 // byte[] String.value
        0020: sipush 1024
        0023: invokespecial #178 // void StringUTF16$CharsSpliterator.<init>(byte[], int)
        0026: iconst_0
        0027: invokestatic #179 // java.util.stream.IntStream java.util.stream.StreamSupport.intStream(java.util.Spliterator$OfInt, boolean)
        002a: areturn
    }
    
    public java.util.stream.IntStream codePoints() {
        // max_stack: 4
        // max_locals: 1
        0000: aload_0
        0001: invokevirtual #33 // boolean String.isLatin1()
        0004: ifeq +20 // 0018
        0007: new #174 // StringLatin1$CharsSpliterator
        000a: dup
        000b: aload_0
        000c: getfield #3 // byte[] String.value
        000f: sipush 1024
        0012: invokespecial #176 // void StringLatin1$CharsSpliterator.<init>(byte[], int)
        0015: goto +17 // 0026
        0018: new #180 // StringUTF16$CodePointsSpliterator
        001b: dup
        001c: aload_0
        001d: getfield #3 // byte[] String.value
        0020: sipush 1024
        0023: invokespecial #181 // void StringUTF16$CodePointsSpliterator.<init>(byte[], int)
        0026: iconst_0
        0027: invokestatic #179 // java.util.stream.IntStream java.util.stream.StreamSupport.intStream(java.util.Spliterator$OfInt, boolean)
        002a: areturn
    }
    
    public char[] toCharArray() {
        // max_stack: 1
        // max_locals: 1
        0000: aload_0
        0001: invokevirtual #33 // boolean String.isLatin1()
        0004: ifeq +13 // 0011
        0007: aload_0
        0008: getfield #3 // byte[] String.value
        000b: invokestatic #182 // char[] StringLatin1.toChars(byte[])
        000e: goto +10 // 0018
        0011: aload_0
        0012: getfield #3 // byte[] String.value
        0015: invokestatic #183 // char[] StringUTF16.toChars(byte[])
        0018: areturn
    }
    
    public static /* varargs */ String format(String, Object[]) {
        // max_stack: 3
        // max_locals: 2
        0000: new #184 // java.util.Formatter
        0003: dup
        0004: invokespecial #185 // void java.util.Formatter.<init>()
        0007: aload_0
        0008: aload_1
        0009: invokevirtual #186 // java.util.Formatter java.util.Formatter.format(String, Object[])
        000c: invokevirtual #187 // String java.util.Formatter.toString()
        000f: areturn
    }
    
    public static /* varargs */ String format(java.util.Locale, String, Object[]) {
        // max_stack: 3
        // max_locals: 3
        0000: new #184 // java.util.Formatter
        0003: dup
        0004: aload_0
        0005: invokespecial #188 // void java.util.Formatter.<init>(java.util.Locale)
        0008: aload_1
        0009: aload_2
        000a: invokevirtual #186 // java.util.Formatter java.util.Formatter.format(String, Object[])
        000d: invokevirtual #187 // String java.util.Formatter.toString()
        0010: areturn
    }
    
    public static String valueOf(Object) {
        // max_stack: 1
        // max_locals: 1
        0000: aload_0
        0001: ifnonnull +8 // 0009
        0004: ldc #189 // "null"
        0006: goto +7 // 000d
        0009: aload_0
        000a: invokevirtual #190 // String Object.toString()
        000d: areturn
    }
    
    public static String valueOf(char[]) {
        // max_stack: 3
        // max_locals: 1
        0000: new #11 // String
        0003: dup
        0004: aload_0
        0005: invokespecial #191 // void String.<init>(char[])
        0008: areturn
    }
    
    public static String valueOf(char[], int, int) {
        // max_stack: 5
        // max_locals: 3
        0000: new #11 // String
        0003: dup
        0004: aload_0
        0005: iload_1
        0006: iload_2
        0007: invokespecial #192 // void String.<init>(char[], int, int)
        000a: areturn
    }
    
    public static String copyValueOf(char[], int, int) {
        // max_stack: 5
        // max_locals: 3
        0000: new #11 // String
        0003: dup
        0004: aload_0
        0005: iload_1
        0006: iload_2
        0007: invokespecial #192 // void String.<init>(char[], int, int)
        000a: areturn
    }
    
    public static String copyValueOf(char[]) {
        // max_stack: 3
        // max_locals: 1
        0000: new #11 // String
        0003: dup
        0004: aload_0
        0005: invokespecial #191 // void String.<init>(char[])
        0008: areturn
    }
    
    public static String valueOf(boolean) {
        // max_stack: 1
        // max_locals: 1
        0000: iload_0
        0001: ifeq +8 // 0009
        0004: ldc #193 // "true"
        0006: goto +5 // 000b
        0009: ldc #194 // "false"
        000b: areturn
    }
    
    public static String valueOf(char) {
        // max_stack: 4
        // max_locals: 1
        0000: getstatic #9 // boolean String.COMPACT_STRINGS
        0003: ifeq +23 // 001a
        0006: iload_0
        0007: invokestatic #195 // boolean StringLatin1.canEncode(int)
        000a: ifeq +16 // 001a
        000d: new #11 // String
        0010: dup
        0011: iload_0
        0012: invokestatic #196 // byte[] StringLatin1.toBytes(char)
        0015: iconst_0
        0016: invokespecial #110 // void String.<init>(byte[], byte)
        0019: areturn
        001a: new #11 // String
        001d: dup
        001e: iload_0
        001f: invokestatic #197 // byte[] StringUTF16.toBytes(char)
        0022: iconst_1
        0023: invokespecial #110 // void String.<init>(byte[], byte)
        0026: areturn
    }
    
    public static String valueOf(int) {
        // max_stack: 1
        // max_locals: 1
        0000: iload_0
        0001: invokestatic #198 // String Integer.toString(int)
        0004: areturn
    }
    
    public static String valueOf(long) {
        // max_stack: 2
        // max_locals: 2
        0000: lload_0
        0001: invokestatic #199 // String Long.toString(long)
        0004: areturn
    }
    
    public static String valueOf(float) {
        // max_stack: 1
        // max_locals: 1
        0000: fload_0
        0001: invokestatic #200 // String Float.toString(float)
        0004: areturn
    }
    
    public static String valueOf(double) {
        // max_stack: 2
        // max_locals: 2
        0000: dload_0
        0001: invokestatic #201 // String Double.toString(double)
        0004: areturn
    }
    
    public native String intern();
    
    public String repeat(int) {
        // max_stack: 6
        // max_locals: 6
        0000: iload_1
        0001: ifge +30 // 001f
        0004: new #202 // IllegalArgumentException
        0007: dup
        0008: new #124 // StringBuilder
        000b: dup
        000c: invokespecial #203 // void StringBuilder.<init>()
        000f: ldc #204 // "count is negative: "
        0011: invokevirtual #127 // StringBuilder StringBuilder.append(String)
        0014: iload_1
        0015: invokevirtual #205 // StringBuilder StringBuilder.append(int)
        0018: invokevirtual #129 // String StringBuilder.toString()
        001b: invokespecial #206 // void IllegalArgumentException.<init>(String)
        001e: athrow
        001f: iload_1
        0020: iconst_1
        0021: if_icmpne +5 // 0026
        0024: aload_0
        0025: areturn
        0026: aload_0
        0027: getfield #3 // byte[] String.value
        002a: arraylength
        002b: istore_2
        002c: iload_2
        002d: ifeq +7 // 0034
        0030: iload_1
        0031: ifne +6 // 0037
        0034: ldc #2 // ""
        0036: areturn
        0037: iload_2
        0038: iconst_1
        0039: if_icmpne +30 // 0057
        003c: iload_1
        003d: newarray 8 // byte[]
        003f: astore_3
        0040: aload_3
        0041: aload_0
        0042: getfield #3 // byte[] String.value
        0045: iconst_0
        0046: baload
        0047: invokestatic #207 // void java.util.Arrays.fill(byte[], byte)
        004a: new #11 // String
        004d: dup
        004e: aload_3
        004f: aload_0
        0050: getfield #4 // byte String.coder
        0053: invokespecial #110 // void String.<init>(byte[], byte)
        0056: areturn
        0057: ldc #209 // 2147483647
        0059: iload_1
        005a: idiv
        005b: iload_2
        005c: if_icmpge +44 // 0088
        005f: new #122 // OutOfMemoryError
        0062: dup
        0063: new #124 // StringBuilder
        0066: dup
        0067: invokespecial #203 // void StringBuilder.<init>()
        006a: ldc #210 // "Repeating "
        006c: invokevirtual #127 // StringBuilder StringBuilder.append(String)
        006f: iload_2
        0070: invokevirtual #205 // StringBuilder StringBuilder.append(int)
        0073: ldc #211 // " bytes String "
        0075: invokevirtual #127 // StringBuilder StringBuilder.append(String)
        0078: iload_1
        0079: invokevirtual #205 // StringBuilder StringBuilder.append(int)
        007c: ldc #212 // " times will produce a String exceeding maximum size."
        007e: invokevirtual #127 // StringBuilder StringBuilder.append(String)
        0081: invokevirtual #129 // String StringBuilder.toString()
        0084: invokespecial #213 // void OutOfMemoryError.<init>(String)
        0087: athrow
        0088: iload_2
        0089: iload_1
        008a: imul
        008b: istore_3
        008c: iload_3
        008d: newarray 8 // byte[]
        008f: astore local_4
        0091: aload_0
        0092: getfield #3 // byte[] String.value
        0095: iconst_0
        0096: aload local_4
        0098: iconst_0
        0099: iload_2
        009a: invokestatic #109 // void System.arraycopy(Object, int, Object, int, int)
        009d: iload_2
        009e: istore local_5
        00a0: iload local_5
        00a2: iload_3
        00a3: iload local_5
        00a5: isub
        00a6: if_icmpge +24 // 00be
        00a9: aload local_4
        00ab: iconst_0
        00ac: aload local_4
        00ae: iload local_5
        00b0: iload local_5
        00b2: invokestatic #109 // void System.arraycopy(Object, int, Object, int, int)
        00b5: iload local_5
        00b7: iconst_1
        00b8: ishl
        00b9: istore local_5
        00bb: goto -27 // 00a0
        00be: aload local_4
        00c0: iconst_0
        00c1: aload local_4
        00c3: iload local_5
        00c5: iload_3
        00c6: iload local_5
        00c8: isub
        00c9: invokestatic #109 // void System.arraycopy(Object, int, Object, int, int)
        00cc: new #11 // String
        00cf: dup
        00d0: aload local_4
        00d2: aload_0
        00d3: getfield #4 // byte String.coder
        00d6: invokespecial #110 // void String.<init>(byte[], byte)
        00d9: areturn
    }
    
    void getBytes(byte[], int, byte) {
        // max_stack: 5
        // max_locals: 4
        0000: aload_0
        0001: invokevirtual #32 // byte String.coder()
        0004: iload_3
        0005: if_icmpne +23 // 001c
        0008: aload_0
        0009: getfield #3 // byte[] String.value
        000c: iconst_0
        000d: aload_1
        000e: iload_2
        000f: iload_3
        0010: ishl
        0011: aload_0
        0012: getfield #3 // byte[] String.value
        0015: arraylength
        0016: invokestatic #109 // void System.arraycopy(Object, int, Object, int, int)
        0019: goto +18 // 002b
        001c: aload_0
        001d: getfield #3 // byte[] String.value
        0020: iconst_0
        0021: aload_1
        0022: iload_2
        0023: aload_0
        0024: getfield #3 // byte[] String.value
        0027: arraylength
        0028: invokestatic #214 // void StringLatin1.inflate(byte[], int, byte[], int, int)
        002b: return
    }
    
    void <init>(char[], int, int, Void) {
        // max_stack: 4
        // max_locals: 6
        0000: aload_0
        0001: invokespecial #1 // void Object.<init>()
        0004: iload_3
        0005: ifne +22 // 001b
        0008: aload_0
        0009: ldc #2 // ""
        000b: getfield #3 // byte[] String.value
        000e: putfield #3 // byte[] String.value
        0011: aload_0
        0012: ldc #2 // ""
        0014: getfield #4 // byte String.coder
        0017: putfield #4 // byte String.coder
        001a: return
        001b: getstatic #9 // boolean String.COMPACT_STRINGS
        001e: ifeq +28 // 003a
        0021: aload_1
        0022: iload_2
        0023: iload_3
        0024: invokestatic #215 // byte[] StringUTF16.compress(char[], int, int)
        0027: astore local_5
        0029: aload local_5
        002b: ifnull +15 // 003a
        002e: aload_0
        002f: aload local_5
        0031: putfield #3 // byte[] String.value
        0034: aload_0
        0035: iconst_0
        0036: putfield #4 // byte String.coder
        0039: return
        003a: aload_0
        003b: iconst_1
        003c: putfield #4 // byte String.coder
        003f: aload_0
        0040: aload_1
        0041: iload_2
        0042: iload_3
        0043: invokestatic #216 // byte[] StringUTF16.toBytes(char[], int, int)
        0046: putfield #3 // byte[] String.value
        0049: return
    }
    
    void <init>(AbstractStringBuilder, Void) {
        // max_stack: 5
        // max_locals: 6
        0000: aload_0
        0001: invokespecial #1 // void Object.<init>()
        0004: aload_1
        0005: invokevirtual #60 // byte[] AbstractStringBuilder.getValue()
        0008: astore_3
        0009: aload_1
        000a: invokevirtual #59 // int AbstractStringBuilder.length()
        000d: istore local_4
        000f: aload_1
        0010: invokevirtual #217 // boolean AbstractStringBuilder.isLatin1()
        0013: ifeq +22 // 0029
        0016: aload_0
        0017: iconst_0
        0018: putfield #4 // byte String.coder
        001b: aload_0
        001c: aload_3
        001d: iconst_0
        001e: iload local_4
        0020: invokestatic #13 // byte[] java.util.Arrays.copyOfRange(byte[], int, int)
        0023: putfield #3 // byte[] String.value
        0026: goto +53 // 005b
        0029: getstatic #9 // boolean String.COMPACT_STRINGS
        002c: ifeq +29 // 0049
        002f: aload_3
        0030: iconst_0
        0031: iload local_4
        0033: invokestatic #218 // byte[] StringUTF16.compress(byte[], int, int)
        0036: astore local_5
        0038: aload local_5
        003a: ifnull +15 // 0049
        003d: aload_0
        003e: iconst_0
        003f: putfield #4 // byte String.coder
        0042: aload_0
        0043: aload local_5
        0045: putfield #3 // byte[] String.value
        0048: return
        0049: aload_0
        004a: iconst_1
        004b: putfield #4 // byte String.coder
        004e: aload_0
        004f: aload_3
        0050: iconst_0
        0051: iload local_4
        0053: iconst_1
        0054: ishl
        0055: invokestatic #13 // byte[] java.util.Arrays.copyOfRange(byte[], int, int)
        0058: putfield #3 // byte[] String.value
        005b: return
    }
    
    void <init>(byte[], byte) {
        // max_stack: 2
        // max_locals: 3
        0000: aload_0
        0001: invokespecial #1 // void Object.<init>()
        0004: aload_0
        0005: aload_1
        0006: putfield #3 // byte[] String.value
        0009: aload_0
        000a: iload_2
        000b: putfield #4 // byte String.coder
        000e: return
    }
    
    byte coder() {
        // max_stack: 1
        // max_locals: 1
        0000: getstatic #9 // boolean String.COMPACT_STRINGS
        0003: ifeq +10 // 000d
        0006: aload_0
        0007: getfield #4 // byte String.coder
        000a: goto +4 // 000e
        000d: iconst_1
        000e: ireturn
    }
    
    byte[] value() {
        // max_stack: 1
        // max_locals: 1
        0000: aload_0
        0001: getfield #3 // byte[] String.value
        0004: areturn
    }
    
    private boolean isLatin1() {
        // max_stack: 1
        // max_locals: 1
        0000: getstatic #9 // boolean String.COMPACT_STRINGS
        0003: ifeq +14 // 0011
        0006: aload_0
        0007: getfield #4 // byte String.coder
        000a: ifne +7 // 0011
        000d: iconst_1
        000e: goto +4 // 0012
        0011: iconst_0
        0012: ireturn
    }
    
    static void checkIndex(int, int) {
        // max_stack: 4
        // max_locals: 2
        0000: iload_0
        0001: iflt +8 // 0009
        0004: iload_0
        0005: iload_1
        0006: if_icmplt +39 // 002d
        0009: new #39 // StringIndexOutOfBoundsException
        000c: dup
        000d: new #124 // StringBuilder
        0010: dup
        0011: invokespecial #203 // void StringBuilder.<init>()
        0014: ldc #219 // "index "
        0016: invokevirtual #127 // StringBuilder StringBuilder.append(String)
        0019: iload_0
        001a: invokevirtual #205 // StringBuilder StringBuilder.append(int)
        001d: ldc #220 // ",length "
        001f: invokevirtual #127 // StringBuilder StringBuilder.append(String)
        0022: iload_1
        0023: invokevirtual #205 // StringBuilder StringBuilder.append(int)
        0026: invokevirtual #129 // String StringBuilder.toString()
        0029: invokespecial #221 // void StringIndexOutOfBoundsException.<init>(String)
        002c: athrow
        002d: return
    }
    
    static void checkOffset(int, int) {
        // max_stack: 4
        // max_locals: 2
        0000: iload_0
        0001: iflt +8 // 0009
        0004: iload_0
        0005: iload_1
        0006: if_icmple +39 // 002d
        0009: new #39 // StringIndexOutOfBoundsException
        000c: dup
        000d: new #124 // StringBuilder
        0010: dup
        0011: invokespecial #203 // void StringBuilder.<init>()
        0014: ldc #222 // "offset "
        0016: invokevirtual #127 // StringBuilder StringBuilder.append(String)
        0019: iload_0
        001a: invokevirtual #205 // StringBuilder StringBuilder.append(int)
        001d: ldc #220 // ",length "
        001f: invokevirtual #127 // StringBuilder StringBuilder.append(String)
        0022: iload_1
        0023: invokevirtual #205 // StringBuilder StringBuilder.append(int)
        0026: invokevirtual #129 // String StringBuilder.toString()
        0029: invokespecial #221 // void StringIndexOutOfBoundsException.<init>(String)
        002c: athrow
        002d: return
    }
    
    static void checkBoundsOffCount(int, int, int) {
        // max_stack: 4
        // max_locals: 3
        0000: iload_0
        0001: iflt +14 // 000f
        0004: iload_1
        0005: iflt +10 // 000f
        0008: iload_0
        0009: iload_2
        000a: iload_1
        000b: isub
        000c: if_icmple +48 // 003c
        000f: new #39 // StringIndexOutOfBoundsException
        0012: dup
        0013: new #124 // StringBuilder
        0016: dup
        0017: invokespecial #203 // void StringBuilder.<init>()
        001a: ldc #222 // "offset "
        001c: invokevirtual #127 // StringBuilder StringBuilder.append(String)
        001f: iload_0
        0020: invokevirtual #205 // StringBuilder StringBuilder.append(int)
        0023: ldc #223 // ", count "
        0025: invokevirtual #127 // StringBuilder StringBuilder.append(String)
        0028: iload_1
        0029: invokevirtual #205 // StringBuilder StringBuilder.append(int)
        002c: ldc #224 // ", length "
        002e: invokevirtual #127 // StringBuilder StringBuilder.append(String)
        0031: iload_2
        0032: invokevirtual #205 // StringBuilder StringBuilder.append(int)
        0035: invokevirtual #129 // String StringBuilder.toString()
        0038: invokespecial #221 // void StringIndexOutOfBoundsException.<init>(String)
        003b: athrow
        003c: return
    }
    
    static void checkBoundsBeginEnd(int, int, int) {
        // max_stack: 4
        // max_locals: 3
        0000: iload_0
        0001: iflt +13 // 000e
        0004: iload_0
        0005: iload_1
        0006: if_icmpgt +8 // 000e
        0009: iload_1
        000a: iload_2
        000b: if_icmple +48 // 003b
        000e: new #39 // StringIndexOutOfBoundsException
        0011: dup
        0012: new #124 // StringBuilder
        0015: dup
        0016: invokespecial #203 // void StringBuilder.<init>()
        0019: ldc #225 // "begin "
        001b: invokevirtual #127 // StringBuilder StringBuilder.append(String)
        001e: iload_0
        001f: invokevirtual #205 // StringBuilder StringBuilder.append(int)
        0022: ldc #226 // ", end "
        0024: invokevirtual #127 // StringBuilder StringBuilder.append(String)
        0027: iload_1
        0028: invokevirtual #205 // StringBuilder StringBuilder.append(int)
        002b: ldc #224 // ", length "
        002d: invokevirtual #127 // StringBuilder StringBuilder.append(String)
        0030: iload_2
        0031: invokevirtual #205 // StringBuilder StringBuilder.append(int)
        0034: invokevirtual #129 // String StringBuilder.toString()
        0037: invokespecial #221 // void StringIndexOutOfBoundsException.<init>(String)
        003a: athrow
        003b: return
    }
    
    static String valueOfCodePoint(int) {
        // max_stack: 7
        // max_locals: 1
        0000: getstatic #9 // boolean String.COMPACT_STRINGS
        0003: ifeq +24 // 001b
        0006: iload_0
        0007: invokestatic #195 // boolean StringLatin1.canEncode(int)
        000a: ifeq +17 // 001b
        000d: new #11 // String
        0010: dup
        0011: iload_0
        0012: i2c
        0013: invokestatic #196 // byte[] StringLatin1.toBytes(char)
        0016: iconst_0
        0017: invokespecial #110 // void String.<init>(byte[], byte)
        001a: areturn
        001b: iload_0
        001c: invokestatic #227 // boolean Character.isBmpCodePoint(int)
        001f: ifeq +17 // 0030
        0022: new #11 // String
        0025: dup
        0026: iload_0
        0027: i2c
        0028: invokestatic #197 // byte[] StringUTF16.toBytes(char)
        002b: iconst_1
        002c: invokespecial #110 // void String.<init>(byte[], byte)
        002f: areturn
        0030: iload_0
        0031: invokestatic #228 // boolean Character.isSupplementaryCodePoint(int)
        0034: ifeq +16 // 0044
        0037: new #11 // String
        003a: dup
        003b: iload_0
        003c: invokestatic #229 // byte[] StringUTF16.toBytesSupplementary(int)
        003f: iconst_1
        0040: invokespecial #110 // void String.<init>(byte[], byte)
        0043: areturn
        0044: new #202 // IllegalArgumentException
        0047: dup
        0048: ldc #230 // "Not a valid Unicode code point: 0x%X"
        004a: iconst_1
        004b: anewarray #231 // Object
        004e: dup
        004f: iconst_0
        0050: iload_0
        0051: invokestatic #232 // Integer Integer.valueOf(int)
        0054: aastore
        0055: invokestatic #233 // String String.format(String, Object[])
        0058: invokespecial #206 // void IllegalArgumentException.<init>(String)
        005b: athrow
    }
    
    public /* bridge|synthetic */ int compareTo(Object) {
        // max_stack: 2
        // max_locals: 2
        0000: aload_0
        0001: aload_1
        0002: checkcast #11 // String
        0005: invokevirtual #234 // int String.compareTo(String)
        0008: ireturn
    }
    
    static void <clinit>() {
        // max_stack: 2
        // max_locals: 0
        0000: iconst_1
        0001: putstatic #9 // boolean String.COMPACT_STRINGS
        0004: iconst_0
        0005: anewarray #235 // java.io.ObjectStreamField
        0008: putstatic #236 // java.io.ObjectStreamField[] String.serialPersistentFields
        000b: new #237 // String$CaseInsensitiveComparator
        000e: dup
        000f: invokespecial #238 // void String$CaseInsensitiveComparator.<init>()
        0012: putstatic #75 // java.util.Comparator String.CASE_INSENSITIVE_ORDER
        0015: return
    }

}
