/*
 * Class file version: 52.0
 *
 * Source file: String.java
 */
package java.lang;

// Signature: Ljava/lang/Object;Ljava/io/Serializable;Ljava/lang/Comparable<Ljava/lang/String;>;Ljava/lang/CharSequence;
public final /* super */ class String implements java.io.Serializable, Comparable, CharSequence {
    
    private final char[] value;
    
    private int hash;
    
    private static final long serialVersionUID = -6849794470754667710l;
    
    private static final java.io.ObjectStreamField[] serialPersistentFields;
    
    public static final java.util.Comparator CASE_INSENSITIVE_ORDER;
    
    public void <init>() {
    }
    
    public void <init>(String) {
    }
    
    public void <init>(char[]) {
    }
    
    public void <init>(char[], int, int) {
    }
    
    public void <init>(int[], int, int) {
    }
    
    @Deprecated
    public void <init>(byte[], int, int, int) {
    }
    
    @Deprecated
    public void <init>(byte[], int) {
    }
    
    private static void checkBounds(byte[], int, int) {
    }
    
    public void <init>(byte[], int, int, String) throws java.io.UnsupportedEncodingException {
    }
    
    public void <init>(byte[], int, int, java.nio.charset.Charset) {
    }
    
    public void <init>(byte[], String) throws java.io.UnsupportedEncodingException {
    }
    
    public void <init>(byte[], java.nio.charset.Charset) {
    }
    
    public void <init>(byte[], int, int) {
    }
    
    public void <init>(byte[]) {
    }
    
    public void <init>(StringBuffer) {
    }
    
    public void <init>(StringBuilder) {
    }
    
    void <init>(char[], boolean) {
    }
    
    public int length() {
    }
    
    public boolean isEmpty() {
    }
    
    public char charAt(int) {
    }
    
    public int codePointAt(int) {
    }
    
    public int codePointBefore(int) {
    }
    
    public int codePointCount(int, int) {
    }
    
    public int offsetByCodePoints(int, int) {
    }
    
    void getChars(char[], int) {
    }
    
    public void getChars(int, int, char[], int) {
    }
    
    @Deprecated
    public void getBytes(int, int, byte[], int) {
    }
    
    public byte[] getBytes(String) throws java.io.UnsupportedEncodingException {
    }
    
    public byte[] getBytes(java.nio.charset.Charset) {
    }
    
    public byte[] getBytes() {
    }
    
    public boolean equals(Object) {
    }
    
    public boolean contentEquals(StringBuffer) {
    }
    
    private boolean nonSyncContentEquals(AbstractStringBuilder) {
    }
    
    public boolean contentEquals(CharSequence) {
    }
    
    public boolean equalsIgnoreCase(String) {
    }
    
    public int compareTo(String) {
    }
    
    public int compareToIgnoreCase(String) {
    }
    
    public boolean regionMatches(int, String, int, int) {
    }
    
    public boolean regionMatches(boolean, int, String, int, int) {
    }
    
    public boolean startsWith(String, int) {
    }
    
    public boolean startsWith(String) {
    }
    
    public boolean endsWith(String) {
    }
    
    public int hashCode() {
    }
    
    public int indexOf(int) {
    }
    
    public int indexOf(int, int) {
    }
    
    private int indexOfSupplementary(int, int) {
    }
    
    public int lastIndexOf(int) {
    }
    
    public int lastIndexOf(int, int) {
    }
    
    private int lastIndexOfSupplementary(int, int) {
    }
    
    public int indexOf(String) {
    }
    
    public int indexOf(String, int) {
    }
    
    static int indexOf(char[], int, int, String, int) {
    }
    
    static int indexOf(char[], int, int, char[], int, int, int) {
    }
    
    public int lastIndexOf(String) {
    }
    
    public int lastIndexOf(String, int) {
    }
    
    static int lastIndexOf(char[], int, int, String, int) {
    }
    
    static int lastIndexOf(char[], int, int, char[], int, int, int) {
    }
    
    public String substring(int) {
    }
    
    public String substring(int, int) {
    }
    
    public CharSequence subSequence(int, int) {
    }
    
    public String concat(String) {
    }
    
    public String replace(char, char) {
    }
    
    public boolean matches(String) {
    }
    
    public boolean contains(CharSequence) {
    }
    
    public String replaceFirst(String, String) {
    }
    
    public String replaceAll(String, String) {
    }
    
    public String replace(CharSequence, CharSequence) {
    }
    
    public String[] split(String, int) {
    }
    
    public String[] split(String) {
    }
    
    public static /* varargs */ String join(CharSequence, CharSequence[]) {
    }
    
    // Signature: (Ljava/lang/CharSequence;Ljava/lang/Iterable<+Ljava/lang/CharSequence;>;)Ljava/lang/String;
    public static String join(CharSequence, Iterable) {
    }
    
    public String toLowerCase(java.util.Locale) {
    }
    
    public String toLowerCase() {
    }
    
    public String toUpperCase(java.util.Locale) {
    }
    
    public String toUpperCase() {
    }
    
    public String trim() {
    }
    
    public String toString() {
    }
    
    public char[] toCharArray() {
    }
    
    public static /* varargs */ String format(String, Object[]) {
    }
    
    public static /* varargs */ String format(java.util.Locale, String, Object[]) {
    }
    
    public static String valueOf(Object) {
    }
    
    public static String valueOf(char[]) {
    }
    
    public static String valueOf(char[], int, int) {
    }
    
    public static String copyValueOf(char[], int, int) {
    }
    
    public static String copyValueOf(char[]) {
    }
    
    public static String valueOf(boolean) {
    }
    
    public static String valueOf(char) {
    }
    
    public static String valueOf(int) {
    }
    
    public static String valueOf(long) {
    }
    
    public static String valueOf(float) {
    }
    
    public static String valueOf(double) {
    }
    
    public native String intern();
    
    public /* bridge|synthetic */ int compareTo(Object) {
    }
    
    static void <clinit>() {
    }

}
