/*
 * Class file version: 55.0
 *
 * Source file: Calendar.java
 */
package java.util;

public /* super */ class Calendar$Builder {
    
    private static final int NFIELDS = 18;
    
    private static final int WEEK_YEAR = 17;
    
    private long instant;
    
    private int[] fields;
    
    private int nextStamp;
    
    private int maxFieldIndex;
    
    private String type;
    
    private TimeZone zone;
    
    private boolean lenient;
    
    private Locale locale;
    
    private int firstDayOfWeek;
    
    private int minimalDaysInFirstWeek;
    
    public void <init>() {
        // max_stack: 2
        // max_locals: 1
        0000: aload_0
        0001: invokespecial #2 // void Object.<init>()
        0004: aload_0
        0005: iconst_1
        0006: putfield #3 // boolean Calendar$Builder.lenient
        0009: return
    }
    
    public Calendar$Builder setInstant(long) {
        // max_stack: 3
        // max_locals: 3
        0000: aload_0
        0001: getfield #4 // int[] Calendar$Builder.fields
        0004: ifnull +11 // 000f
        0007: new #5 // IllegalStateException
        000a: dup
        000b: invokespecial #6 // void IllegalStateException.<init>()
        000e: athrow
        000f: aload_0
        0010: lload_1
        0011: putfield #7 // long Calendar$Builder.instant
        0014: aload_0
        0015: iconst_1
        0016: putfield #8 // int Calendar$Builder.nextStamp
        0019: aload_0
        001a: areturn
    }
    
    public Calendar$Builder setInstant(Date) {
        // max_stack: 3
        // max_locals: 2
        0000: aload_0
        0001: aload_1
        0002: invokevirtual #9 // long Date.getTime()
        0005: invokevirtual #10 // Calendar$Builder Calendar$Builder.setInstant(long)
        0008: areturn
    }
    
    public Calendar$Builder set(int, int) {
        // max_stack: 3
        // max_locals: 3
        0000: iload_1
        0001: iflt +9 // 000a
        0004: iload_1
        0005: bipush 17
        0007: if_icmplt +13 // 0014
        000a: new #11 // IllegalArgumentException
        000d: dup
        000e: ldc #12 // "field is invalid"
        0010: invokespecial #13 // void IllegalArgumentException.<init>(String)
        0013: athrow
        0014: aload_0
        0015: invokevirtual #14 // boolean Calendar$Builder.isInstantSet()
        0018: ifeq +13 // 0025
        001b: new #5 // IllegalStateException
        001e: dup
        001f: ldc #15 // "instant has been set"
        0021: invokespecial #16 // void IllegalStateException.<init>(String)
        0024: athrow
        0025: aload_0
        0026: invokevirtual #17 // void Calendar$Builder.allocateFields()
        0029: aload_0
        002a: iload_1
        002b: iload_2
        002c: invokevirtual #18 // void Calendar$Builder.internalSet(int, int)
        002f: aload_0
        0030: areturn
    }
    
    public /* varargs */ Calendar$Builder setFields(int[]) {
        // max_stack: 4
        // max_locals: 5
        0000: aload_1
        0001: arraylength
        0002: istore_2
        0003: iload_2
        0004: iconst_2
        0005: irem
        0006: ifeq +11 // 0011
        0009: new #11 // IllegalArgumentException
        000c: dup
        000d: invokespecial #19 // void IllegalArgumentException.<init>()
        0010: athrow
        0011: aload_0
        0012: invokevirtual #14 // boolean Calendar$Builder.isInstantSet()
        0015: ifeq +13 // 0022
        0018: new #5 // IllegalStateException
        001b: dup
        001c: ldc #15 // "instant has been set"
        001e: invokespecial #16 // void IllegalStateException.<init>(String)
        0021: athrow
        0022: aload_0
        0023: getfield #8 // int Calendar$Builder.nextStamp
        0026: iload_2
        0027: iconst_2
        0028: idiv
        0029: iadd
        002a: ifge +13 // 0037
        002d: new #5 // IllegalStateException
        0030: dup
        0031: ldc #20 // "stamp counter overflow"
        0033: invokespecial #16 // void IllegalStateException.<init>(String)
        0036: athrow
        0037: aload_0
        0038: invokevirtual #17 // void Calendar$Builder.allocateFields()
        003b: iconst_0
        003c: istore_3
        003d: iload_3
        003e: iload_2
        003f: if_icmpge +48 // 006f
        0042: aload_1
        0043: iload_3
        0044: iinc local_3, 1
        0047: iaload
        0048: istore local_4
        004a: iload local_4
        004c: iflt +10 // 0056
        004f: iload local_4
        0051: bipush 17
        0053: if_icmplt +13 // 0060
        0056: new #11 // IllegalArgumentException
        0059: dup
        005a: ldc #12 // "field is invalid"
        005c: invokespecial #13 // void IllegalArgumentException.<init>(String)
        005f: athrow
        0060: aload_0
        0061: iload local_4
        0063: aload_1
        0064: iload_3
        0065: iinc local_3, 1
        0068: iaload
        0069: invokevirtual #18 // void Calendar$Builder.internalSet(int, int)
        006c: goto -47 // 003d
        006f: aload_0
        0070: areturn
    }
    
    public Calendar$Builder setDate(int, int, int) {
        // max_stack: 5
        // max_locals: 4
        0000: aload_0
        0001: bipush 6
        0003: newarray 10 // int[]
        0005: dup
        0006: iconst_0
        0007: iconst_1
        0008: iastore
        0009: dup
        000a: iconst_1
        000b: iload_1
        000c: iastore
        000d: dup
        000e: iconst_2
        000f: iconst_2
        0010: iastore
        0011: dup
        0012: iconst_3
        0013: iload_2
        0014: iastore
        0015: dup
        0016: iconst_4
        0017: iconst_5
        0018: iastore
        0019: dup
        001a: iconst_5
        001b: iload_3
        001c: iastore
        001d: invokevirtual #21 // Calendar$Builder Calendar$Builder.setFields(int[])
        0020: areturn
    }
    
    public Calendar$Builder setTimeOfDay(int, int, int) {
        // max_stack: 5
        // max_locals: 4
        0000: aload_0
        0001: iload_1
        0002: iload_2
        0003: iload_3
        0004: iconst_0
        0005: invokevirtual #22 // Calendar$Builder Calendar$Builder.setTimeOfDay(int, int, int, int)
        0008: areturn
    }
    
    public Calendar$Builder setTimeOfDay(int, int, int, int) {
        // max_stack: 5
        // max_locals: 5
        0000: aload_0
        0001: bipush 8
        0003: newarray 10 // int[]
        0005: dup
        0006: iconst_0
        0007: bipush 11
        0009: iastore
        000a: dup
        000b: iconst_1
        000c: iload_1
        000d: iastore
        000e: dup
        000f: iconst_2
        0010: bipush 12
        0012: iastore
        0013: dup
        0014: iconst_3
        0015: iload_2
        0016: iastore
        0017: dup
        0018: iconst_4
        0019: bipush 13
        001b: iastore
        001c: dup
        001d: iconst_5
        001e: iload_3
        001f: iastore
        0020: dup
        0021: bipush 6
        0023: bipush 14
        0025: iastore
        0026: dup
        0027: bipush 7
        0029: iload local_4
        002b: iastore
        002c: invokevirtual #21 // Calendar$Builder Calendar$Builder.setFields(int[])
        002f: areturn
    }
    
    public Calendar$Builder setWeekDate(int, int, int) {
        // max_stack: 3
        // max_locals: 4
        0000: aload_0
        0001: invokevirtual #17 // void Calendar$Builder.allocateFields()
        0004: aload_0
        0005: bipush 17
        0007: iload_1
        0008: invokevirtual #18 // void Calendar$Builder.internalSet(int, int)
        000b: aload_0
        000c: iconst_3
        000d: iload_2
        000e: invokevirtual #18 // void Calendar$Builder.internalSet(int, int)
        0011: aload_0
        0012: bipush 7
        0014: iload_3
        0015: invokevirtual #18 // void Calendar$Builder.internalSet(int, int)
        0018: aload_0
        0019: areturn
    }
    
    public Calendar$Builder setTimeZone(TimeZone) {
        // max_stack: 2
        // max_locals: 2
        0000: aload_1
        0001: ifnonnull +11 // 000c
        0004: new #24 // NullPointerException
        0007: dup
        0008: invokespecial #25 // void NullPointerException.<init>()
        000b: athrow
        000c: aload_0
        000d: aload_1
        000e: putfield #26 // TimeZone Calendar$Builder.zone
        0011: aload_0
        0012: areturn
    }
    
    public Calendar$Builder setLenient(boolean) {
        // max_stack: 2
        // max_locals: 2
        0000: aload_0
        0001: iload_1
        0002: putfield #3 // boolean Calendar$Builder.lenient
        0005: aload_0
        0006: areturn
    }
    
    public Calendar$Builder setCalendarType(String) {
        // max_stack: 4
        // max_locals: 2
        0000: aload_1
        0001: ldc #27 // "gregorian"
        0003: invokevirtual #28 // boolean String.equals(Object)
        0006: ifeq +6 // 000c
        0009: ldc #29 // "gregory"
        000b: astore_1
        000c: invokestatic #30 // Set Calendar.getAvailableCalendarTypes()
        000f: aload_1
        0010: invokeinterface #31 // boolean Set.contains(Object)
        0015: ifne +39 // 003c
        0018: aload_1
        0019: ldc #32 // "iso8601"
        001b: invokevirtual #28 // boolean String.equals(Object)
        001e: ifne +30 // 003c
        0021: new #11 // IllegalArgumentException
        0024: dup
        0025: new #33 // StringBuilder
        0028: dup
        0029: invokespecial #34 // void StringBuilder.<init>()
        002c: ldc #35 // "unknown calendar type: "
        002e: invokevirtual #36 // StringBuilder StringBuilder.append(String)
        0031: aload_1
        0032: invokevirtual #36 // StringBuilder StringBuilder.append(String)
        0035: invokevirtual #37 // String StringBuilder.toString()
        0038: invokespecial #13 // void IllegalArgumentException.<init>(String)
        003b: athrow
        003c: aload_0
        003d: getfield #38 // String Calendar$Builder.type
        0040: ifnonnull +11 // 004b
        0043: aload_0
        0044: aload_1
        0045: putfield #38 // String Calendar$Builder.type
        0048: goto +24 // 0060
        004b: aload_0
        004c: getfield #38 // String Calendar$Builder.type
        004f: aload_1
        0050: invokevirtual #28 // boolean String.equals(Object)
        0053: ifne +13 // 0060
        0056: new #5 // IllegalStateException
        0059: dup
        005a: ldc #39 // "calendar type override"
        005c: invokespecial #16 // void IllegalStateException.<init>(String)
        005f: athrow
        0060: aload_0
        0061: areturn
    }
    
    public Calendar$Builder setLocale(Locale) {
        // max_stack: 2
        // max_locals: 2
        0000: aload_1
        0001: ifnonnull +11 // 000c
        0004: new #24 // NullPointerException
        0007: dup
        0008: invokespecial #25 // void NullPointerException.<init>()
        000b: athrow
        000c: aload_0
        000d: aload_1
        000e: putfield #40 // Locale Calendar$Builder.locale
        0011: aload_0
        0012: areturn
    }
    
    public Calendar$Builder setWeekDefinition(int, int) {
        // max_stack: 2
        // max_locals: 3
        0000: aload_0
        0001: iload_1
        0002: invokevirtual #41 // boolean Calendar$Builder.isValidWeekParameter(int)
        0005: ifeq +11 // 0010
        0008: aload_0
        0009: iload_2
        000a: invokevirtual #41 // boolean Calendar$Builder.isValidWeekParameter(int)
        000d: ifne +11 // 0018
        0010: new #11 // IllegalArgumentException
        0013: dup
        0014: invokespecial #19 // void IllegalArgumentException.<init>()
        0017: athrow
        0018: aload_0
        0019: iload_1
        001a: putfield #42 // int Calendar$Builder.firstDayOfWeek
        001d: aload_0
        001e: iload_2
        001f: putfield #43 // int Calendar$Builder.minimalDaysInFirstWeek
        0022: aload_0
        0023: areturn
    }
    
    public Calendar build() {
        // max_stack: 5
        // max_locals: 5
        0000: aload_0
        0001: getfield #40 // Locale Calendar$Builder.locale
        0004: ifnonnull +10 // 000e
        0007: aload_0
        0008: invokestatic #44 // Locale Locale.getDefault()
        000b: putfield #40 // Locale Calendar$Builder.locale
        000e: aload_0
        000f: getfield #26 // TimeZone Calendar$Builder.zone
        0012: ifnonnull +14 // 0020
        0015: aload_0
        0016: aload_0
        0017: getfield #40 // Locale Calendar$Builder.locale
        001a: invokestatic #45 // TimeZone Calendar.defaultTimeZone(Locale)
        001d: putfield #26 // TimeZone Calendar$Builder.zone
        0020: aload_0
        0021: getfield #38 // String Calendar$Builder.type
        0024: ifnonnull +16 // 0034
        0027: aload_0
        0028: aload_0
        0029: getfield #40 // Locale Calendar$Builder.locale
        002c: ldc #46 // "ca"
        002e: invokevirtual #47 // String Locale.getUnicodeLocaleType(String)
        0031: putfield #38 // String Calendar$Builder.type
        0034: aload_0
        0035: getfield #38 // String Calendar$Builder.type
        0038: ifnonnull +42 // 0062
        003b: aload_0
        003c: getfield #40 // Locale Calendar$Builder.locale
        003f: invokevirtual #48 // String Locale.getCountry()
        0042: ldc #49 // "TH"
        0044: if_acmpne +24 // 005c
        0047: aload_0
        0048: getfield #40 // Locale Calendar$Builder.locale
        004b: invokevirtual #50 // String Locale.getLanguage()
        004e: ldc #51 // "th"
        0050: if_acmpne +12 // 005c
        0053: aload_0
        0054: ldc #52 // "buddhist"
        0056: putfield #38 // String Calendar$Builder.type
        0059: goto +9 // 0062
        005c: aload_0
        005d: ldc #29 // "gregory"
        005f: putfield #38 // String Calendar$Builder.type
        0062: aload_0
        0063: getfield #38 // String Calendar$Builder.type
        0066: astore_2
        0067: iconst_m1
        0068: istore_3
        0069: aload_2
        006a: invokevirtual #53 // int String.hashCode()
        006d: lookupswitch // -1581060683:00b4 -752730191:00c2 283776265:0098 2095190916:00a6 default:00cd
        0098: aload_2
        0099: ldc #29 // "gregory"
        009b: invokevirtual #28 // boolean String.equals(Object)
        009e: ifeq +47 // 00cd
        00a1: iconst_0
        00a2: istore_3
        00a3: goto +42 // 00cd
        00a6: aload_2
        00a7: ldc #32 // "iso8601"
        00a9: invokevirtual #28 // boolean String.equals(Object)
        00ac: ifeq +33 // 00cd
        00af: iconst_1
        00b0: istore_3
        00b1: goto +28 // 00cd
        00b4: aload_2
        00b5: ldc #52 // "buddhist"
        00b7: invokevirtual #28 // boolean String.equals(Object)
        00ba: ifeq +19 // 00cd
        00bd: iconst_2
        00be: istore_3
        00bf: goto +14 // 00cd
        00c2: aload_2
        00c3: ldc #54 // "japanese"
        00c5: invokevirtual #28 // boolean String.equals(Object)
        00c8: ifeq +5 // 00cd
        00cb: iconst_3
        00cc: istore_3
        00cd: iload_3
        00ce: tableswitch // 0:00ec 1:0100 2:012e 3:0145 default:0159
        00ec: new #55 // GregorianCalendar
        00ef: dup
        00f0: aload_0
        00f1: getfield #26 // TimeZone Calendar$Builder.zone
        00f4: aload_0
        00f5: getfield #40 // Locale Calendar$Builder.locale
        00f8: iconst_1
        00f9: invokespecial #56 // void GregorianCalendar.<init>(TimeZone, Locale, boolean)
        00fc: astore_1
        00fd: goto +122 // 0177
        0100: new #55 // GregorianCalendar
        0103: dup
        0104: aload_0
        0105: getfield #26 // TimeZone Calendar$Builder.zone
        0108: aload_0
        0109: getfield #40 // Locale Calendar$Builder.locale
        010c: iconst_1
        010d: invokespecial #56 // void GregorianCalendar.<init>(TimeZone, Locale, boolean)
        0110: astore local_4
        0112: aload local_4
        0114: new #57 // Date
        0117: dup
        0118: ldc2_w #59 // -9223372036854775808l
        011b: invokespecial #61 // void Date.<init>(long)
        011e: invokevirtual #62 // void GregorianCalendar.setGregorianChange(Date)
        0121: aload_0
        0122: iconst_2
        0123: iconst_4
        0124: invokevirtual #63 // Calendar$Builder Calendar$Builder.setWeekDefinition(int, int)
        0127: pop
        0128: aload local_4
        012a: astore_1
        012b: goto +76 // 0177
        012e: new #64 // sun.util.BuddhistCalendar
        0131: dup
        0132: aload_0
        0133: getfield #26 // TimeZone Calendar$Builder.zone
        0136: aload_0
        0137: getfield #40 // Locale Calendar$Builder.locale
        013a: invokespecial #65 // void sun.util.BuddhistCalendar.<init>(TimeZone, Locale)
        013d: astore_1
        013e: aload_1
        013f: invokevirtual #66 // void Calendar.clear()
        0142: goto +53 // 0177
        0145: new #67 // JapaneseImperialCalendar
        0148: dup
        0149: aload_0
        014a: getfield #26 // TimeZone Calendar$Builder.zone
        014d: aload_0
        014e: getfield #40 // Locale Calendar$Builder.locale
        0151: iconst_1
        0152: invokespecial #68 // void JapaneseImperialCalendar.<init>(TimeZone, Locale, boolean)
        0155: astore_1
        0156: goto +33 // 0177
        0159: new #11 // IllegalArgumentException
        015c: dup
        015d: new #33 // StringBuilder
        0160: dup
        0161: invokespecial #34 // void StringBuilder.<init>()
        0164: ldc #35 // "unknown calendar type: "
        0166: invokevirtual #36 // StringBuilder StringBuilder.append(String)
        0169: aload_0
        016a: getfield #38 // String Calendar$Builder.type
        016d: invokevirtual #36 // StringBuilder StringBuilder.append(String)
        0170: invokevirtual #37 // String StringBuilder.toString()
        0173: invokespecial #13 // void IllegalArgumentException.<init>(String)
        0176: athrow
        0177: aload_1
        0178: aload_0
        0179: getfield #3 // boolean Calendar$Builder.lenient
        017c: invokevirtual #69 // void Calendar.setLenient(boolean)
        017f: aload_0
        0180: getfield #42 // int Calendar$Builder.firstDayOfWeek
        0183: ifeq +19 // 0196
        0186: aload_1
        0187: aload_0
        0188: getfield #42 // int Calendar$Builder.firstDayOfWeek
        018b: invokevirtual #70 // void Calendar.setFirstDayOfWeek(int)
        018e: aload_1
        018f: aload_0
        0190: getfield #43 // int Calendar$Builder.minimalDaysInFirstWeek
        0193: invokevirtual #71 // void Calendar.setMinimalDaysInFirstWeek(int)
        0196: aload_0
        0197: invokevirtual #14 // boolean Calendar$Builder.isInstantSet()
        019a: ifeq +17 // 01ab
        019d: aload_1
        019e: aload_0
        019f: getfield #7 // long Calendar$Builder.instant
        01a2: invokevirtual #72 // void Calendar.setTimeInMillis(long)
        01a5: aload_1
        01a6: invokevirtual #73 // void Calendar.complete()
        01a9: aload_1
        01aa: areturn
        01ab: aload_0
        01ac: getfield #4 // int[] Calendar$Builder.fields
        01af: ifnull +206 // 027d
        01b2: aload_0
        01b3: bipush 17
        01b5: invokevirtual #74 // boolean Calendar$Builder.isSet(int)
        01b8: ifeq +23 // 01cf
        01bb: aload_0
        01bc: getfield #4 // int[] Calendar$Builder.fields
        01bf: bipush 17
        01c1: iaload
        01c2: aload_0
        01c3: getfield #4 // int[] Calendar$Builder.fields
        01c6: iconst_1
        01c7: iaload
        01c8: if_icmple +7 // 01cf
        01cb: iconst_1
        01cc: goto +4 // 01d0
        01cf: iconst_0
        01d0: istore_2
        01d1: iload_2
        01d2: ifeq +40 // 01fa
        01d5: aload_1
        01d6: invokevirtual #75 // boolean Calendar.isWeekDateSupported()
        01d9: ifne +33 // 01fa
        01dc: new #11 // IllegalArgumentException
        01df: dup
        01e0: new #33 // StringBuilder
        01e3: dup
        01e4: invokespecial #34 // void StringBuilder.<init>()
        01e7: ldc #76 // "week date is unsupported by "
        01e9: invokevirtual #36 // StringBuilder StringBuilder.append(String)
        01ec: aload_0
        01ed: getfield #38 // String Calendar$Builder.type
        01f0: invokevirtual #36 // StringBuilder StringBuilder.append(String)
        01f3: invokevirtual #37 // String StringBuilder.toString()
        01f6: invokespecial #13 // void IllegalArgumentException.<init>(String)
        01f9: athrow
        01fa: iconst_2
        01fb: istore_3
        01fc: iload_3
        01fd: aload_0
        01fe: getfield #8 // int Calendar$Builder.nextStamp
        0201: if_icmpge +57 // 023a
        0204: iconst_0
        0205: istore local_4
        0207: iload local_4
        0209: aload_0
        020a: getfield #77 // int Calendar$Builder.maxFieldIndex
        020d: if_icmpgt +39 // 0234
        0210: aload_0
        0211: getfield #4 // int[] Calendar$Builder.fields
        0214: iload local_4
        0216: iaload
        0217: iload_3
        0218: if_icmpne +22 // 022e
        021b: aload_1
        021c: iload local_4
        021e: aload_0
        021f: getfield #4 // int[] Calendar$Builder.fields
        0222: bipush 18
        0224: iload local_4
        0226: iadd
        0227: iaload
        0228: invokevirtual #78 // void Calendar.set(int, int)
        022b: goto +9 // 0234
        022e: iinc local_4, 1
        0231: goto -42 // 0207
        0234: iinc local_3, 1
        0237: goto -59 // 01fc
        023a: iload_2
        023b: ifeq +62 // 0279
        023e: aload_0
        023f: iconst_3
        0240: invokevirtual #74 // boolean Calendar$Builder.isSet(int)
        0243: ifeq +13 // 0250
        0246: aload_0
        0247: getfield #4 // int[] Calendar$Builder.fields
        024a: bipush 21
        024c: iaload
        024d: goto +4 // 0251
        0250: iconst_1
        0251: istore_3
        0252: aload_0
        0253: bipush 7
        0255: invokevirtual #74 // boolean Calendar$Builder.isSet(int)
        0258: ifeq +13 // 0265
        025b: aload_0
        025c: getfield #4 // int[] Calendar$Builder.fields
        025f: bipush 25
        0261: iaload
        0262: goto +7 // 0269
        0265: aload_1
        0266: invokevirtual #79 // int Calendar.getFirstDayOfWeek()
        0269: istore local_4
        026b: aload_1
        026c: aload_0
        026d: getfield #4 // int[] Calendar$Builder.fields
        0270: bipush 35
        0272: iaload
        0273: iload_3
        0274: iload local_4
        0276: invokevirtual #80 // void Calendar.setWeekDate(int, int, int)
        0279: aload_1
        027a: invokevirtual #73 // void Calendar.complete()
        027d: aload_1
        027e: areturn
    }
    
    private void allocateFields() {
        // max_stack: 2
        // max_locals: 1
        0000: aload_0
        0001: getfield #4 // int[] Calendar$Builder.fields
        0004: ifnonnull +21 // 0019
        0007: aload_0
        0008: bipush 36
        000a: newarray 10 // int[]
        000c: putfield #4 // int[] Calendar$Builder.fields
        000f: aload_0
        0010: iconst_2
        0011: putfield #8 // int Calendar$Builder.nextStamp
        0014: aload_0
        0015: iconst_m1
        0016: putfield #77 // int Calendar$Builder.maxFieldIndex
        0019: return
    }
    
    private void internalSet(int, int) {
        // max_stack: 6
        // max_locals: 3
        0000: aload_0
        0001: getfield #4 // int[] Calendar$Builder.fields
        0004: iload_1
        0005: aload_0
        0006: dup
        0007: getfield #8 // int Calendar$Builder.nextStamp
        000a: dup_x1
        000b: iconst_1
        000c: iadd
        000d: putfield #8 // int Calendar$Builder.nextStamp
        0010: iastore
        0011: aload_0
        0012: getfield #8 // int Calendar$Builder.nextStamp
        0015: ifge +13 // 0022
        0018: new #5 // IllegalStateException
        001b: dup
        001c: ldc #20 // "stamp counter overflow"
        001e: invokespecial #16 // void IllegalStateException.<init>(String)
        0021: athrow
        0022: aload_0
        0023: getfield #4 // int[] Calendar$Builder.fields
        0026: bipush 18
        0028: iload_1
        0029: iadd
        002a: iload_2
        002b: iastore
        002c: iload_1
        002d: aload_0
        002e: getfield #77 // int Calendar$Builder.maxFieldIndex
        0031: if_icmple +14 // 003f
        0034: iload_1
        0035: bipush 17
        0037: if_icmpge +8 // 003f
        003a: aload_0
        003b: iload_1
        003c: putfield #77 // int Calendar$Builder.maxFieldIndex
        003f: return
    }
    
    private boolean isInstantSet() {
        // max_stack: 2
        // max_locals: 1
        0000: aload_0
        0001: getfield #8 // int Calendar$Builder.nextStamp
        0004: iconst_1
        0005: if_icmpne +7 // 000c
        0008: iconst_1
        0009: goto +4 // 000d
        000c: iconst_0
        000d: ireturn
    }
    
    private boolean isSet(int) {
        // max_stack: 2
        // max_locals: 2
        0000: aload_0
        0001: getfield #4 // int[] Calendar$Builder.fields
        0004: ifnull +16 // 0014
        0007: aload_0
        0008: getfield #4 // int[] Calendar$Builder.fields
        000b: iload_1
        000c: iaload
        000d: ifle +7 // 0014
        0010: iconst_1
        0011: goto +4 // 0015
        0014: iconst_0
        0015: ireturn
    }
    
    private boolean isValidWeekParameter(int) {
        // max_stack: 2
        // max_locals: 2
        0000: iload_1
        0001: ifle +13 // 000e
        0004: iload_1
        0005: bipush 7
        0007: if_icmpgt +7 // 000e
        000a: iconst_1
        000b: goto +4 // 000f
        000e: iconst_0
        000f: ireturn
    }

}
